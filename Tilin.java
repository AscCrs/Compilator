/* Tilin.java */
/* Generated By:JavaCC: Do not edit this line. Tilin.java */
import java.util.ArrayList;

class Tilin implements TilinConstants {
    static ArrayList<String> tabla = TilinTokenManager.tablaErrores;

    public static void main(String[] args) {
        try {
            Tilin parser = new Tilin(System.in);
            parser.ProgramaLS();

            if (tabla.size() != 0) {
                System.out.println("\nAn\u00e1lisis completado con errores\n");
                for (String error : tabla) {
                    System.out.println(error);
                }
            } else {
                System.out.println("An\u00e1lisis exitoso");
            }
        } catch (ParseException e) {
            System.out.println("Error de An\u00e1lisis -> " + Tilin.traducirMensaje(e.getMessage()));
        }
    }

    // FunciÃ³n para traducir mensajes de error
    public static String traducirMensaje(String mensaje) {
        if (mensaje.contains("Encountered")) {
            mensaje = mensaje.replace("Encountered", "Encontrado");
        }
        if (mensaje.contains("at line")) {
            mensaje = mensaje.replace("at line", "en la l\u00ednea");
        }
        if (mensaje.contains("column")) {
            mensaje = mensaje.replace("column", "columna");
        }
        if (mensaje.contains("Was expecting:")) {
            mensaje = mensaje.replace("Was expecting:", "Se esperaba:");
        }
        if (mensaje.contains("Was expecting one of:")) {
            mensaje = mensaje.replace("Was expecting one of:", "Se espera una de estas opciones:");
        }
        return mensaje;
    }

  static final public void ProgramaLS() throws ParseException {
    try {
      jj_consume_token(IdPrograma);
      jj_consume_token(ReservadaInicio);
      label_1:
      while (true) {
        Sentencias();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoCadena:
        case TipoDatoCaracter:
        case TipoDatoNoRetorno:
        case TipoAmbitoPrivado:
        case TipoAmbitoPublico:
        case OperacionResta:
        case OperacionMultiplicacion:
        case OperacionDivision:
        case CondicionalIf:
        case CondicionalSwitch:
        case CicloFor:
        case CicloWhile:
        case Vector:
        case Matriz:
        case Constante:
        case Variable:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(Fin);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void Sentencias() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:
    case TipoDatoDecimal:
    case TipoDatoCadena:
    case TipoDatoCaracter:{
      SentenciasFP();
      break;
      }
    case Lectura:{
      gramaticaLectura();
      break;
      }
    case Escritura:{
      gramaticaEscrita();
      break;
      }
    case Constante:{
      gramaticaAsignarConstantes();
      break;
      }
    case Vector:{
      gramaticaVectores();
      break;
      }
    case Matriz:{
      gramaticaMatrices();
      break;
      }
    case TipoAmbitoPrivado:
    case TipoAmbitoPublico:{
      gramaticaFunciones();
      break;
      }
    case TipoDatoNoRetorno:{
      gramaticaProcedimientos();
      break;
      }
    case CondicionalIf:{
      gramaticaIf();
      break;
      }
    case CondicionalSwitch:{
      gramaticaSwitch();
      break;
      }
    case CicloWhile:{
      gramaticaWhile();
      break;
      }
    case CicloFor:{
      gramaticaFor();
      break;
      }
    case OperacionResta:
    case OperacionMultiplicacion:
    case OperacionDivision:
    case Variable:{
      gramaticaAritmeticas();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void SentenciasLC() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OperacionDesigualdad:
      case OperacionMayorQue:
      case OperacionMenorQue:
      case OperacionMayorOIgualQue:
      case OperacionMenorOIgualQue:
      case Numero:
      case Variable:{
        gramaticaLogicas();
        break;
        }{
        gramaticaComparativas();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OperacionDesigualdad:
      case OperacionMayorQue:
      case OperacionMenorQue:
      case OperacionMayorOIgualQue:
      case OperacionMenorOIgualQue:
      case Numero:
      case Variable:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
}

  static final public void gramaticaLogicas() throws ParseException {
    gramaticaComparativas();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionAnd:{
      jj_consume_token(OperacionAnd);
      break;
      }
    case OperacionOr:{
      jj_consume_token(OperacionOr);
      break;
      }
    case OperacionNot:{
      jj_consume_token(OperacionNot);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    gramaticaComparativas();
}

  static final public void gramaticaComparativas() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Variable:{
      jj_consume_token(Variable);
      break;
      }
    case Numero:{
      jj_consume_token(Numero);
      jj_consume_token(OperacionIgualdad);
      break;
      }
    case OperacionDesigualdad:{
      jj_consume_token(OperacionDesigualdad);
      break;
      }
    case OperacionMayorQue:{
      jj_consume_token(OperacionMayorQue);
      break;
      }
    case OperacionMenorQue:{
      jj_consume_token(OperacionMenorQue);
      break;
      }
    case OperacionMayorOIgualQue:{
      jj_consume_token(OperacionMayorOIgualQue);
      break;
      }
    case OperacionMenorOIgualQue:{
      jj_consume_token(OperacionMenorOIgualQue);
      jj_consume_token(Variable);
      break;
      }{
      jj_consume_token(Numero);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void SentenciasFP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:{
      gramaticaVariableEntero();
      break;
      }
    case TipoDatoDecimal:{
      gramaticaVariableDecimal();
      break;
      }
    case TipoDatoCadena:{
      gramaticaDatoCadena();
      break;
      }
    case TipoDatoCaracter:{
      gramaticaDatoCaracter();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void gramaticaVariableEntero() throws ParseException {
    try {
      jj_consume_token(TipoDatoEntero);
      jj_consume_token(Variable);
      jj_consume_token(Asignacion);
      jj_consume_token(Numero);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaVariableDecimal() throws ParseException {
    try {
      jj_consume_token(TipoDatoDecimal);
      jj_consume_token(Variable);
      jj_consume_token(Asignacion);
      jj_consume_token(NumeroDecimal);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaDatoCadena() throws ParseException {
    try {
      jj_consume_token(TipoDatoCadena);
      jj_consume_token(Variable);
      jj_consume_token(Asignacion);
      jj_consume_token(Cadenas_Palabras);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaDatoCaracter() throws ParseException {
    try {
      jj_consume_token(TipoDatoCaracter);
      jj_consume_token(Variable);
      jj_consume_token(Asignacion);
      jj_consume_token(Cadenas_Palabras);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaLectura() throws ParseException {
    try {
      jj_consume_token(Lectura);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Variable:{
        jj_consume_token(Variable);
        break;
        }
      case Constante:{
        jj_consume_token(Constante);
        break;
        }
      case Numero:{
        jj_consume_token(Numero);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaEscrita() throws ParseException {
    try {
      jj_consume_token(Escritura);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Variable:{
        jj_consume_token(Variable);
        break;
        }
      case Constante:{
        jj_consume_token(Constante);
        break;
        }
      case Numero:{
        jj_consume_token(Numero);
        break;
        }
      case Cadenas_Palabras:{
        jj_consume_token(Cadenas_Palabras);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Concatenacion:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(Concatenacion);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Variable:{
          jj_consume_token(Variable);
          break;
          }
        case Constante:{
          jj_consume_token(Constante);
          break;
          }
        case Numero:{
          jj_consume_token(Numero);
          break;
          }
        case Cadenas_Palabras:{
          jj_consume_token(Cadenas_Palabras);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaAsignarVariables() throws ParseException {
    try {
      jj_consume_token(Variable);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TipoDatoEntero:{
        jj_consume_token(TipoDatoEntero);
        break;
        }
      case TipoDatoDecimal:{
        jj_consume_token(TipoDatoDecimal);
        break;
        }
      case TipoDatoCadena:{
        jj_consume_token(TipoDatoCadena);
        break;
        }
      case TipoDatoCaracter:{
        jj_consume_token(TipoDatoCaracter);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(Asignacion);
      jj_consume_token(Numero);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaAsignarConstantes() throws ParseException {
    try {
      jj_consume_token(Constante);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TipoDatoEntero:{
        jj_consume_token(TipoDatoEntero);
        break;
        }
      case TipoDatoDecimal:{
        jj_consume_token(TipoDatoDecimal);
        break;
        }
      case TipoDatoCadena:{
        jj_consume_token(TipoDatoCadena);
        break;
        }
      case TipoDatoCaracter:{
        jj_consume_token(TipoDatoCaracter);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(Asignacion);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Variable:{
        jj_consume_token(Variable);
        break;
        }
      case Constante:{
        jj_consume_token(Constante);
        break;
        }
      case Numero:{
        jj_consume_token(Numero);
        break;
        }
      case Cadenas_Palabras:{
        jj_consume_token(Cadenas_Palabras);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaVectores() throws ParseException {
    try {
      jj_consume_token(Vector);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TipoDatoEntero:{
        jj_consume_token(TipoDatoEntero);
        break;
        }
      case TipoDatoDecimal:{
        jj_consume_token(TipoDatoDecimal);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CorcheteAbre);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Numero:{
        jj_consume_token(Numero);
        break;
        }
      case NumeroDecimal:{
        jj_consume_token(NumeroDecimal);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CorcheteCierra);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaMatrices() throws ParseException {
    try {
      jj_consume_token(Matriz);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TipoDatoEntero:{
        jj_consume_token(TipoDatoEntero);
        break;
        }
      case TipoDatoDecimal:{
        jj_consume_token(TipoDatoDecimal);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CorcheteAbre);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Numero:{
        jj_consume_token(Numero);
        break;
        }
      case NumeroDecimal:{
        jj_consume_token(NumeroDecimal);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CorcheteCierra);
      jj_consume_token(CorcheteAbre);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Numero:{
        jj_consume_token(Numero);
        break;
        }
      case NumeroDecimal:{
        jj_consume_token(NumeroDecimal);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CorcheteCierra);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaFunciones() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TipoAmbitoPublico:{
        jj_consume_token(TipoAmbitoPublico);
        break;
        }
      case TipoAmbitoPrivado:{
        jj_consume_token(TipoAmbitoPrivado);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TipoDatoEntero:{
          jj_consume_token(TipoDatoEntero);
          break;
          }
        case TipoDatoDecimal:{
          jj_consume_token(TipoDatoDecimal);
          break;
          }
        case TipoDatoCadena:{
          jj_consume_token(TipoDatoCadena);
          break;
          }
        case TipoDatoCaracter:{
          jj_consume_token(TipoDatoCaracter);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(Funcion);
        jj_consume_token(ParentesisAbre);
        SentenciasFP();
        jj_consume_token(ParentesisCierra);
        jj_consume_token(Start);
        Sentencias();
        jj_consume_token(End);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaProcedimientos() throws ParseException {
    try {
      jj_consume_token(TipoDatoNoRetorno);
      jj_consume_token(Procedimiento);
      jj_consume_token(ParentesisAbre);
      jj_consume_token(ParentesisCierra);
      jj_consume_token(Start);
      label_4:
      while (true) {
        Sentencias();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoCadena:
        case TipoDatoCaracter:
        case TipoDatoNoRetorno:
        case TipoAmbitoPrivado:
        case TipoAmbitoPublico:
        case OperacionResta:
        case OperacionMultiplicacion:
        case OperacionDivision:
        case CondicionalIf:
        case CondicionalSwitch:
        case CicloFor:
        case CicloWhile:
        case Vector:
        case Matriz:
        case Constante:
        case Variable:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(End);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaIf() throws ParseException {
    try {
      jj_consume_token(CondicionalIf);
      jj_consume_token(LlaveAbre);
      SentenciasLC();
      jj_consume_token(LlaveCierra);
      jj_consume_token(Start);
      Sentencias();
      jj_consume_token(End);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void SentenciaSwitch() throws ParseException {
    try {
      jj_consume_token(Caso);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Numero:{
        jj_consume_token(Numero);
        break;
        }
      case Cadenas_Palabras:{
        jj_consume_token(Cadenas_Palabras);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DelimitadorCasoSwitch);
      Sentencias();
      jj_consume_token(Break);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaSwitch() throws ParseException {
    try {
      jj_consume_token(CondicionalSwitch);
      jj_consume_token(LlaveAbre);
      jj_consume_token(Variable);
      jj_consume_token(LlaveCierra);
      jj_consume_token(Start);
      SentenciaSwitch();
      jj_consume_token(End);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaWhile() throws ParseException {
    try {
      jj_consume_token(CicloWhile);
      jj_consume_token(LlaveAbre);
      SentenciasLC();
      jj_consume_token(LlaveCierra);
      jj_consume_token(Start);
      Sentencias();
      jj_consume_token(End);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaFor() throws ParseException {
    try {
      jj_consume_token(CicloFor);
      jj_consume_token(LlaveAbre);
      gramaticaAsignarVariables();
      gramaticaComparativas();
      jj_consume_token(DelimitadorLineaDeCodigo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Incre:{
        gramaticaIncremento();
        break;
        }
      case Decre:{
        gramaticaDecremento();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LlaveCierra);
      jj_consume_token(Start);
      Sentencias();
      jj_consume_token(End);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaIncremento() throws ParseException {
    try {
      jj_consume_token(Incre);
      jj_consume_token(Variable);
      jj_consume_token(Incremento);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaDecremento() throws ParseException {
    try {
      jj_consume_token(Decre);
      jj_consume_token(Variable);
      jj_consume_token(Decremento);
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static final public void gramaticaAritmeticas() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Variable:{
        jj_consume_token(Variable);
        jj_consume_token(Asignacion);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Variable:{
          jj_consume_token(Variable);
          break;
          }
        case Numero:{
          jj_consume_token(Numero);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(OperacionSuma);
        break;
        }
      case OperacionMultiplicacion:{
        jj_consume_token(OperacionMultiplicacion);
        break;
        }
      case OperacionResta:{
        jj_consume_token(OperacionResta);
        break;
        }
      case OperacionDivision:{
        jj_consume_token(OperacionDivision);
        jj_consume_token(Variable);
        jj_consume_token(DelimitadorLineaDeCodigo);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        Tilin.tabla.add("Error en Sintaxis -> " + Tilin.traducirMensaje(e.getMessage()));
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TilinTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x38003fe0,0x38003fe0,0x0,0x0,0x0,0x0,0x780,0x0,0x0,0x1000000,0x0,0x780,0x780,0x0,0x180,0x0,0x180,0x0,0x0,0x780,0x3000,0x38003fe0,0x0,0x0,0x0,0x38000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x303f000,0x303f000,0x21003e0,0x21003e0,0xe,0x21003e0,0x0,0x3100000,0x3500000,0x0,0x3500000,0x0,0x0,0x3500000,0x0,0x300000,0x0,0x300000,0x300000,0x0,0x0,0x303f000,0x500000,0xc00,0x2100000,0x2000000,};
	}

  /** Constructor with InputStream. */
  public Tilin(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Tilin(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new TilinTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Tilin(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new TilinTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new TilinTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Tilin(TilinTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TilinTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[63];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 26; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 63; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
