options {
    LOOKAHEAD = 1;
}

PARSER_BEGIN(linkers)

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

class linkers {

    static ArrayList<String> tabla = linkersTokenManager.tablaErrores;
    static Map<String, String> declaredVariables = new HashMap<String, String>();

    public static void main(String[] args) {
        try {
            linkers link = new linkers(System.in);
            link.Programalink();

            if (!link.tabla.isEmpty()) {
                System.out.println("\u001B[31m\nErrores encontrados:\n\u001B[0m");
                for (String error : link.tabla) {
                    System.out.println(error);
                }
            } else {
                System.out.println("\u001B[32mAnálisis exitoso\u001B[0m");
            }

        } catch (ParseException e) {
            System.out.println("Error de Análisis -> " + e.getMessage());
        }
    }

    static void checkAndAddVariable(Token id, String type, int line, int column) {
        if (declaredVariables.containsKey(id.image)) {
            tabla.add("Error Semántico -> Variable repetida: " + id.image + " en línea " + line + ", columna " + column);
        } else {
            declaredVariables.put(id.image, type);
        }
    }
}

PARSER_END(linkers)

TOKEN_MGR_DECLS : {
    static ArrayList<String> tablaErrores = new ArrayList<String>();

    public void LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
        String errorMessage = "Error Léxico -> Línea: " + errorLine + ", Columna: " + errorColumn + ", Descripción: ";
        if (EOFSeen) {
            errorMessage += "<EOF> encontrado, pero esperaba más caracteres.";
        } else {
            errorMessage += "\"" + curChar + "\" encontrado, pero esperaba más caracteres.";
        }
        tablaErrores.add(errorMessage);
    }
}



TOKEN: {//PALABRAS RESERVADAS
    <ReservadaInicio: "INICIAR"> 
    | <Lectura: "Leer">
    | <Escritura: "Escribir">
    | <CondicionalIf: "if">
    | <CondicionalIfthen: "ifthen">
    | <CondicionalElse: "else">
    | <CondicionalSwitch: "Switch">
    | <CicloWhile: "While">
    | <CicloFor: "For">
    | <Default: "Default">
    | <Caso: "Caso">
    | <Break: "Break">
    | <VERDADERO: "Verdadero">
    | <FALSO: "Falso">
}

TOKEN: {// TIPOS DE DATO
    <TipoDatoEntero: "Entero">
    | <TipoDatoDecimal: "Decimal">
    | <TipoDatoBooleano: "boolean">
}

TOKEN: { //CARACTERES
    <LlaveAbre: "{">
    | <LlaveCierra: "}">
    | <ParentesisAbre: "(">
    | <ParentesisCierra: ")">
    | <DelimitadorLineaDeCodigo: ";">
    | <DelimitadorCasoSwitch: ":">
}

TOKEN: {// OPERADORES ARITMETICOS
     <OperacionSuma: "+">
    | <OperacionResta: "-">
    | <OperacionMultiplicacion: "*">
    | <OperacionDivision: "/">
    | <OperacionResiduo: "%">
}

TOKEN: {// OPERADORES RELACIONALES
    <Asignacion: "=">
    | <OperacionMayorQue: ">">
    | <OperacionMenorQue: "<">
    | <OperacionMenorOIgualQue: "<=">
    | <OperacionMayorOIgualQue: ">=">
    | <OperacionIgualdad: "==">
    | <OperacionDesigualdad: "!=">
}

TOKEN: {// OPERADORES LOGICOS
    <OperacionAnd: "&">
    | <OperacionOr: "|">
    | <OperacionNot: "!">
}

TOKEN: {
    <CADENA: "\""(~["\""])*"\""> 
    | <IDENTIFICADOR: (<LETRA>)+ (<LETRA>|<NUMERO>)* > 
    | <NUMERO_FLOTANTE: (["0"-"9"])+"."(["0"-"9"])+> 
    | <NUMERO: (["0"-"9"])+>    
    | <#LETRA: (["A"-"Z","a"-"z","á","é","í","ó","ú"])+>  
    | <IdPrograma: (["A"])(["l"])(["g"])(["a"-"z","A"-"Z","_"])(["a"-"z","A"-"Z","0"-"9","_"])*>
}

SKIP: {
    " " | "\r" | "\t" | "\n"
}

SPECIAL_TOKEN: {
    < ANYTHING : ~[] > // Esto capturará cualquier token no definido
    {
        linkersTokenManager.tablaErrores.add("Error Léxico -> Línea: " + input_stream.getEndLine() + ", Columna: " + input_stream.getEndColumn() + ", Token no reconocido.");
    }
}

void Programalink() : {}{

    try {
        (
            <IdPrograma>
            try{<ReservadaInicio> }catch(ParseException e){tabla.add("Error de Sintaxis -> " + e.getMessage());}
            try{<LlaveAbre> }catch(ParseException e){tabla.add("Error de Sintaxis -> " + e.getMessage());}
            
            (sentencias())* 

            try{<LlaveCierra> }catch(ParseException e){tabla.add("Error de Sintaxis -> " + e.getMessage());} )
<EOF>
    } catch (ParseException e) {
        Token t;    
        do {
            t = getNextToken();
        } while (t.kind != EOF);
    
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}


void sentencias() : {} {
    declararVariables()
    | asignacion()
    | entrada()
    | salida()
    | condicionalIf()
    | condicionalIfthen()
    | condicionalSwitch() 
    | cicloFor()
    | cicloWhile() 
}

////////////////////////////////////////     MANEJO DE SEMANTICO PARA VARIABLES    ///////////////////////////////////////////////

void verificarExistenciaVariable(Token token) : {} { 
    {
        if (!linkers.declaredVariables.containsKey(token.image)) {
            linkers.tabla.add("Error Semántico -> Variable no declarada: " + token.image + " en línea " + token.beginLine + ", columna " + token.beginColumn);
        }
    }
}

String verificarExistenciaYObtenerTipo(Token token) : {
    String tipo;
} {
    {
        if (token.kind == linkersConstants.IDENTIFICADOR) {
            if (linkers.declaredVariables.containsKey(token.image)) {
                tipo = linkers.declaredVariables.get(token.image);
            } else {
                linkers.tabla.add("Error Semántico -> Variable no declarada: " + token.image + " en línea " + token.beginLine + ", columna " + token.beginColumn);
                tipo = "error";
            }
        } else if (token.kind == linkersConstants.NUMERO) {
            tipo = "int";
        } else if (token.kind == linkersConstants.NUMERO_FLOTANTE) {
            tipo = "float";
        } else if (token.kind == linkersConstants.VERDADERO || token.kind == linkersConstants.FALSO) {
            tipo = "boolean";
        } else {
            tipo = "error";
        }
    }
    { return tipo; }
}

///////////////////////////////////////////    VARIABLES    ////////////////////////////////////////////

void declararVariables() : {} {
    VariableINT() | VariableFLOAT() | VariableBOOLEAN()
}

void VariableINT() : {
    Token id;
    int line, column;
} {
    try {
        <TipoDatoEntero>
        id = <IDENTIFICADOR>
        {
            line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "int", line, column);
        }
        [ <Asignacion> try { <NUMERO> } catch (ParseException e) { linkers.tabla.add("Error Semántico -> " + e.getMessage()); } ]
        <DelimitadorLineaDeCodigo>
    } catch (ParseException e) {
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

void VariableFLOAT() : {
    Token id;
    int line, column;
} {
    try {
        <TipoDatoDecimal>
        id = <IDENTIFICADOR>
        {
            line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "float", line, column);
        }
        [ <Asignacion> try { <NUMERO_FLOTANTE> } catch (ParseException e) { linkers.tabla.add("Error Semántico -> " + e.getMessage()); } ]
        <DelimitadorLineaDeCodigo>
    } catch (ParseException e) {
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

void VariableBOOLEAN() : {
    Token id;
    int line, column;
} {
    try {
        <TipoDatoBooleano>
        id = <IDENTIFICADOR>
        {
            line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "boolean", line, column);
        }
        [ <Asignacion> try { (<VERDADERO> | <FALSO>) } catch (ParseException e) { linkers.tabla.add("Error Semántico -> " + e.getMessage()); } ]
        <DelimitadorLineaDeCodigo>
    } catch (ParseException e) {
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

void asignacion() : {
    Token id;
    String varType = "";
    String type = "";
} {
    try {
        id = <IDENTIFICADOR>
        {
            if (!linkers.declaredVariables.containsKey(id.image)) {
                linkers.tabla.add("Error Semántico -> Variable no declarada: " + id.image + " en línea " + id.beginLine + ", columna " + id.beginColumn);
            } else {
                varType = linkers.declaredVariables.get(id.image);
            }
        }
        <Asignacion>
        {
            type = expresion(varType);
            if (!type.equals(varType)) {
                linkers.tabla.add("Error Semántico 2-> Tipo incorrecto en la operación. Se esperaba: " + varType + " pero se obtuvo: " + type + " en línea " + id.beginLine + ", columna " + id.beginColumn);
            }
        }
        <DelimitadorLineaDeCodigo>
    } catch (ParseException e) {
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/////////////////////////////////////////   ENTRADA Y SALIDA   //////////////////////////////////////////////

void entrada() : {} {
    try {
        <Lectura>
        try {
            <ParentesisAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }

        {Token token = jj_consume_token(linkersConstants.IDENTIFICADOR);
        if (!linkers.declaredVariables.containsKey(token.image)) {
            linkers.tabla.add("Error Semántico en entrada-> Variable no declarada: " + token.image + " en línea " + token.beginLine + ", columna " + token.beginColumn);
        }
    }
        try {
            <ParentesisCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        try {
            <DelimitadorLineaDeCodigo>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
    } catch (ParseException e) {
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}


void salida() : {} {
    try {
        <Escritura>
        try {
            <ParentesisAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }

        {Token token = getToken(1);
        
        if (token.kind == linkersConstants.CADENA) {
            jj_consume_token(linkersConstants.CADENA);
        } else if (token.kind == linkersConstants.IDENTIFICADOR) {
            jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (!linkers.declaredVariables.containsKey(token.image)) {
                linkers.tabla.add("Error Semántico en salida-> Variable no declarada: " + token.image + " en línea " + token.beginLine + ", columna " + token.beginColumn);
            }
        } else {
            linkers.tabla.add("Error de Sintaxis -> Se esperaba una cadena o un identificador, pero se encontró: " + token.image + " en línea " + token.beginLine + ", columna " + token.beginColumn);
            jj_consume_token(token.kind); // Consumir el token inesperado para continuar
        }

        while (nextTokenIs(linkersConstants.OperacionSuma)) {
            jj_consume_token(linkersConstants.OperacionSuma);
            token = getToken(1);
            if (token.kind == linkersConstants.CADENA) {
                jj_consume_token(linkersConstants.CADENA);
            } else if (token.kind == linkersConstants.IDENTIFICADOR) {
                jj_consume_token(linkersConstants.IDENTIFICADOR);
                if (!linkers.declaredVariables.containsKey(token.image)) {
                    linkers.tabla.add("Error Semántico en salida-> Variable no declarada: " + token.image + " en línea " + token.beginLine + ", columna " + token.beginColumn);
                }
            } else {
                linkers.tabla.add("Error de Sintaxis -> Se esperaba una cadena o un identificador, pero se encontró: " + token.image + " en línea " + token.beginLine + ", columna " + token.beginColumn);
                jj_consume_token(token.kind); // Consumir el token inesperado para continuar
            }
        }
    }
        try {
            <ParentesisCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        try {
            <DelimitadorLineaDeCodigo>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
    } catch (ParseException e) {
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/////////////////////////////////////////     CONDICIONALES   //////////////////////////////////////////////

void condicionalIf() : {} {
    try {
        <CondicionalIf>
        try {
            <ParentesisAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        condicion()
        try {
            <ParentesisCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        try {
            <LlaveAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        (sentencias())*
        try {
            <LlaveCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        
        // Manejo del bloque else opcional
        [ 
            <CondicionalElse>
            try {
                <LlaveAbre>
            } catch (ParseException e) {
                linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
            }
            (sentencias())*
            try {
                <LlaveCierra>
            } catch (ParseException e) {
                linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
            }
        ]
    } catch (ParseException e) {
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

void condicionalIfthen() : {} {
    try {
        <CondicionalIfthen>
        try {
            <ParentesisAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        condicion()
        try {
            <ParentesisCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        try {
            <LlaveAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        (sentencias())*
        try {
            <LlaveCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
    } catch (ParseException e) {
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

void condicionalSwitch() : {} {
    try {
        <CondicionalSwitch>
        try {
            <ParentesisAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        <IDENTIFICADOR>
        try {
            <ParentesisCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }

        try {
            <LlaveAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }

        ( 
            <Caso>
            <NUMERO>
            <DelimitadorCasoSwitch>
            (sentencias())*
            try {
                <Break>
            } catch (ParseException e) {
                linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
            }
            try {
                <DelimitadorLineaDeCodigo>
            } catch (ParseException e) {
                linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
            }
        )*

        [
            <Default>
            <DelimitadorCasoSwitch>
            (sentencias())*
        ]

        try {
            <LlaveCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
    } catch (ParseException e) {
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}
/////////////////////////////////////////////     CICLOS      //////////////////////////////////////////
void cicloFor() : {} {
    try {
        <CicloFor>
        try {
            <ParentesisAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }

        (declararVariables() | asignacion())
        condicion()
        try {
            <DelimitadorLineaDeCodigo>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }

        <IDENTIFICADOR>
        operadorAritmetico()
        <NUMERO>

        try {
            <ParentesisCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        try {
            <LlaveAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }

        (sentencias())*
        try {
            <LlaveCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
    } catch (ParseException e) {
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

void cicloWhile() : {} {
    try {
        <CicloWhile>
        try {
            <ParentesisAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        condicion()
        try {
            <ParentesisCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        try {
            <LlaveAbre>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        (sentencias())*
        try {
            <LlaveCierra>
        } catch (ParseException e) {
            linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
    } catch (ParseException e) {
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}
/////////////////////////////////////////////     AUXILIARES DE CONDICIONES   //////////////////////////////////////////
void condicion() : {} {
    condicionSimple()
    (
        operadorLogico()
        condicionSimple()
    )*
}

void condicionSimple() : {
    Token token1, token2;
    String type1 = "", type2 = "";
} {
    {
        token1 = valor();
        type1 = verificarExistenciaYObtenerTipo(token1);
        
        operadorRelacional();
        
        token2 = valor();
        type2 = verificarExistenciaYObtenerTipo(token2);
        
        if (!type1.equals(type2) && !type1.equals("error") && !type2.equals("error")) {
            linkers.tabla.add("Error Semántico en condición-> Tipos incompatibles en la condición: " + type1 + " y " + type2 + " en línea " + token1.beginLine + ", columna " + token1.beginColumn);
        }
    }
}

/////////////////////////////////////////    OPERADORES     //////////////////////////////////////////////


void operadorRelacional() : {} {
    (
        <OperacionMayorQue>
        | <OperacionMenorQue>
        | <OperacionMenorOIgualQue>
        | <OperacionMayorOIgualQue>
        | <OperacionIgualdad>
        | <OperacionDesigualdad>
    )
}

void operadorLogico() : {} {
    (
        <OperacionAnd>
        | <OperacionOr>
	    | <OperacionNot>
    )
}

void operadorAritmetico() : {} {
    (<OperacionSuma> | <OperacionResta> | <OperacionMultiplicacion> | <OperacionDivision> | <OperacionResiduo>)
}
/////////////////////////////////////////    METODOS PARA FASE SEMANTICA     //////////////////////////////////////////////
//En esta parte se consumen almacenan y comparan los token existentes para hacer funcionar 
//la fase semantica en ciclos y condiciones


String expresion(String expectedType) : {
    String type = "";
} {
    type = termino(expectedType)
    (
        operadorAritmetico()
        {
            String tempType = termino(expectedType);
            if (tempType != null && !tempType.equals(expectedType) && !tempType.equals("error")) {
                linkers.tabla.add("Error Semántico -> Tipo incorrecto en la operación. Se esperaba: " + expectedType + " pero se obtuvo: " + tempType + " en línea " + token.beginLine + ", columna " + token.beginColumn);
            }
        }
    )*
    { return type; }
}

String termino(String expectedType) : {
    String type = "";
} {
    type = factor(expectedType)
    (
        operadorAritmetico()
        {
            String tempType = factor(expectedType);
            if (tempType != null && !tempType.equals(expectedType) && !tempType.equals("error")) {
                linkers.tabla.add("Error Semántico -> Tipo incorrecto en la operación. Se esperaba: " + expectedType + " pero se obtuvo: " + tempType + " en línea " + token.beginLine + ", columna " + token.beginColumn);
            }
        }
    )*
    { return type; }
}


String factor(String expectedType) : {
    Token token = null;
    String type = "";
} {
    try {
        {if (nextTokenIs(linkersConstants.ParentesisAbre)) {
            type = operacionParentesis(expectedType);
        } else if (nextTokenIs(linkersConstants.NUMERO)) {
            token = jj_consume_token(linkersConstants.NUMERO);
            type = "int";
        } else if (nextTokenIs(linkersConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersConstants.NUMERO_FLOTANTE);
            type = "float";
        } else if (nextTokenIs(linkersConstants.VERDADERO)) {
            token = jj_consume_token(linkersConstants.VERDADERO);
            type = "boolean";
        } else if (nextTokenIs(linkersConstants.FALSO)) {
            token = jj_consume_token(linkersConstants.FALSO);
            type = "boolean";
        } else if (nextTokenIs(linkersConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (linkers.declaredVariables.containsKey(token.image)) {
                type = linkers.declaredVariables.get(token.image);
            } else {
                linkers.tabla.add("Error Semántico -> Variable no declarada: " + token.image + " en línea " + token.beginLine + ", columna " + token.beginColumn);
                type = "error"; // Asignar un tipo de error para manejar variables no declaradas
            }
        } else {
            type = "error"; // Asignar un tipo de error para casos no contemplados
        }


        if (token != null && !type.equals(expectedType) && !type.equals("error")) {
            linkers.tabla.add("Error Semántico -> Tipo incorrecto. Se esperaba: " + expectedType + " pero se obtuvo: " + type + " en línea " + token.beginLine + ", columna " + token.beginColumn);
        }}
    } catch (ParseException e) {
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
    { return type; }
}

// Método auxiliar para verificar el próximo token
boolean nextTokenIs(int kind) : {
    Token t;
} {
    {t = getToken(1);
    return t.kind == kind;}
}

// Función para manejar operaciones con paréntesis
String operacionParentesis(String expectedType) : {
    String type = "";
} {
    try {
        {jj_consume_token(linkersConstants.ParentesisAbre);
        type = expresion(expectedType); // Usamos la función `expresion` para manejar la operación dentro de los paréntesis
        jj_consume_token(linkersConstants.ParentesisCierra);

        if (!type.equals(expectedType)) {
            linkers.tabla.add("Error Semántico -> Tipo incorrecto en la operación entre paréntesis. Se esperaba: " + expectedType + " pero se obtuvo: " + type);
        }}
    } catch (ParseException e) {
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
    { return type; }
}

Token valor() : {
    Token token = null;
} {
    try {
        {if (nextTokenIs(linkersConstants.NUMERO)) {
            token = jj_consume_token(linkersConstants.NUMERO);
        } else if (nextTokenIs(linkersConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersConstants.NUMERO_FLOTANTE);
        } else if (nextTokenIs(linkersConstants.VERDADERO)) {
            token = jj_consume_token(linkersConstants.VERDADERO);
        } else if (nextTokenIs(linkersConstants.FALSO)) {
            token = jj_consume_token(linkersConstants.FALSO);
        } else if (nextTokenIs(linkersConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            verificarExistenciaVariable(token);
        } else {
            linkers.tabla.add("Error de Sintaxis -> Token inesperado en la condición.");
            throw new ParseException("Token inesperado en la condición.");
        }}

    } catch (ParseException e) {
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        throw e;
    }
    { return token; }
}
