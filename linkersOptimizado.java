/* linkersOptimizado.java */
/* Generated By:JavaCC: Do not edit this line. linkersOptimizado.java */
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Collections;

class linkersOptimizado implements linkersOptimizadoConstants {

    // Tabla de errores
    static ArrayList<String> tabla = linkersOptimizadoTokenManager.tablaErrores;
    static Map<String, String> declaredVariables = new HashMap<String, String>();

    // Lista para almacenar el TAC generado
    static ArrayList<TAC> intermedia = new ArrayList<TAC>();
    static int tempVarCounter = 0; // contador de variables temporales actuales
    static int labelCounter = 0; // contador de etiquetas actuales
    static ArrayList<String> casos = new ArrayList<>();
    static ArrayList<String> partesIF = new ArrayList<>();
    static ArrayList<String> contenidoIF = new ArrayList<>();
    static int countLines = 0;
    static int contadorCondiciones = 0;
    static int cases = 0;

    public static void main(String[] args) {
        try {
            linkersOptimizado link = new linkersOptimizado(System.in);
            link.Programalink();

            if (!link.tabla.isEmpty()) {
                System.out.println("\u001b[31m\nErrores encontrados:\n\u001b[0m");
                for (String error : link.tabla) {
                    System.out.println(error);
                }
            } else {
                System.out.println("\u001b[32mAn\u00e1lisis exitoso\u001b[0m");

                // Generar el archivo de codigo intermedio
                String outputFileName = "Intermedio_Optimizado.txt";
                PrintWriter writer = null;
                try {
                    writer = new PrintWriter(new FileWriter(outputFileName));
                    for (TAC i : intermedia) {
                        writer.println(i);
                    }
                    System.out.println("\nEl codigo intermedio generado ha sido guardado en el archivo: " + outputFileName);

                } catch (IOException e) {
                    System.out.println("Error al escribir el codigo intermedio en el archivo: " + e.getMessage());
                } finally {
                    if (writer != null) {
                        writer.close();
                    }
                }
            }

        } catch (ParseException e) {
            System.out.println("Error de An\u00e1lisis -> " + e.getMessage());
        }
    }

    static void checkAndAddVariable(Token id, String type, int line, int column) {
        if (declaredVariables.containsKey(id.image)) {
            tabla.add("Error Sem\u00e1ntico -> Variable repetida: " + id.image + " en l\u00ednea " + line + ", columna " + column);
        } else {
            declaredVariables.put(id.image, type);
        }
    }

    public static <T> void cambiarPosicion(ArrayList<T> lista, int posicionInicial, int posicionNueva) {
        T elementoTemporal = lista.get(posicionInicial); // Almacena el elemento en la posición inicial
        lista.set(posicionInicial, lista.get(posicionNueva)); // Coloca el elemento de la posición nueva en la posición inicial
        lista.set(posicionNueva, elementoTemporal); // Coloca el elemento temporal en la posición nueva
    }

    public static <T> ArrayList<T> moverUltimosNAntesDePosicion(ArrayList<T> lista, int n, int posicionDestino) {
        int size = lista.size();

        // Validaciones
        if (n <= 0 || n > size) {
            throw new IllegalArgumentException("n debe estar entre 1 y el tama\u00f1o de la lista");
        }
        if (posicionDestino < 0 || posicionDestino > size - n) {
            throw new IllegalArgumentException("La posici\u00f3n de destino debe estar dentro de los l\u00edmites v\u00e1lidos");
        }

        // Divide la lista en tres partes: antes de la posición de destino, los últimos n elementos, y el resto
        ArrayList<T> parteInicial = new ArrayList<>(lista.subList(0, posicionDestino));
        ArrayList<T> ultimosN = new ArrayList<>(lista.subList(size - n, size));
        ArrayList<T> parteCentral = new ArrayList<>(lista.subList(posicionDestino, size - n));

        // Une las partes en el nuevo orden: parte inicial + últimos n + parte central
        parteInicial.addAll(ultimosN);
        parteInicial.addAll(parteCentral);

        return parteInicial;
    }

    public static boolean comprobarDuplicados(ArrayList<String> lista, int posicionInicio) {
        // Validar la posición de inicio
        if (posicionInicio < 0 || posicionInicio >= lista.size()) {
            throw new IllegalArgumentException("La posici\u00f3n de inicio debe estar dentro de los l\u00edmites de la lista");
        }

        // Iterar sobre cada elemento en la lista
        for (int i = posicionInicio; i < lista.size(); i++) {
            String elementoActual = lista.get(i);

            // Comprobar duplicados a partir de la posición de inicio
            for (int j = i + 1; j < lista.size(); j++) {
                if (elementoActual.equals(lista.get(j))) {
                    return true; // Si se encuentra un duplicado, retorna true
                }
            }
        }
        return false; // Si no se encuentran duplicados, retorna false
    }



    // Clase para el objeto de representacion intermedia
    static class TAC {
        private String operator;
        private String operand1;
        private String operand2;
        private String result;

        public TAC() { }

        // Constructor para operaciones binarias (+, -, *, /)
        public TAC(String operator, String operand1, String operand2, String result) {
            this.operator = operator;
            this.operand1 = operand1;
            this.operand2 = operand2;
            this.result = result;
        }

        // Constructor para operaciones de Asignacion 
        public TAC(String operator, String operand1, String result) {
            this(operator, operand1, null,result); // Se llama al primer constructor por una operacion unaria
        }

        // Constructor para operaciones de salto o etiquetado 
        public TAC(String operator, String result) {
            this(operator, null, null, result); // Operaciones sin operandos
        }

        // getters

        public String getOperator() {
            return this.operator;
        }

        public String getOperand1() {
            return this.operand1;
        }

        public String getOperand2() {
            return this.operand2;
        }

        public String getResult() {
            return this.result;
        }

        @Override
        public String toString() {
            if (this.operand2 != null) { // Es una operacion binaria
                return this.result + " = " + this.operand1 + " " + this.operator + " " + this.operand2;
            } else if (this.operand1 != null) {
                return this.result + " " + this.operator + " " + this.operand1;
            } else { // Operaciones unarias
                return this.operator + " " + this.result;
            }
        }
    }

    // Clase para representar el resultado de una expresión
    static class ExpressionResult {
        String type;
        String place;

        public ExpressionResult(String type, String place) {
            this.type = type;
            this.place = place;
        }
    }

    // Procedimiento para generar variables temporales 
    static String newTemp() {
        return "t" + (tempVarCounter++);
    }

    // Método para generar el etiquetado
    static String newLabel() {
        return "L" + (labelCounter++) + " : ";
    }

    static String newLabelNoPoint(){
        return "L" + (labelCounter++);
    }

    static class Parameter {
        String type;
        String name;

        public Parameter(String type, String name) {
            this.type = type;
            this.name = name;
        }

        public Parameter() {

        }
    }

  static final public void Programalink() throws ParseException {
    try {
      try {
        jj_consume_token(ReservadaInicio);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case LlamarFuncion:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NoRetorno:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        procedimiento();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLICO:
        case PRIVADO:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        funcion();
      }
      jj_consume_token(0);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOF);

        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void sentencias() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:
    case TipoDatoDecimal:
    case TipoDatoBooleano:
    case TipoDatoCadena:
    case TIpoDatoCaracter:{
      declararVariables();
      break;
      }
    case IDENTIFICADOR:{
      asignacion();
      break;
      }
    case Lectura:{
      entrada();
      break;
      }
    case Escritura:{
      salida();
      break;
      }
    case CondicionalIf:{
      condicionalIf();
      break;
      }
    case CondicionalIfthen:{
      condicionalIfthen();
      break;
      }
    case CicloFor:{
      cicloFor();
      break;
      }
    case CicloWhile:{
      cicloWhile();
      break;
      }
    case CondicionalSwitch:{
      condicionalSwitch();
      break;
      }
    case LlamarFuncion:{
      llamadaFuncion();
countLines++;
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void verificarExistenciaVariable(Token token) throws ParseException {
if (!linkersOptimizado.declaredVariables.containsKey(token.image)) {
            linkersOptimizado.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
}

/**
 * Verifica la existencia de un token y obtiene su tipo.
 *
 * @param token El token que se va a verificar.
 * @return El tipo del token si existe, de lo contrario, un valor que indique que no existe.
 * @throws SomeException Si ocurre un error durante la verificación.
 */
  static final public String verificarExistenciaYObtenerTipo(Token token) throws ParseException {String tipo;
if (token.kind == linkersOptimizadoConstants.IDENTIFICADOR) {
            if (linkersOptimizado.declaredVariables.containsKey(token.image)) {
                tipo = linkersOptimizado.declaredVariables.get(token.image);
            } else {
                linkersOptimizado.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                tipo = "error";
            }
        } else if (token.kind == linkersOptimizadoConstants.NUMERO) {
            tipo = "int";
        } else if (token.kind == linkersOptimizadoConstants.NUMERO_FLOTANTE) {
            tipo = "float";
        } else if (token.kind == linkersOptimizadoConstants.VERDADERO || token.kind == linkersOptimizadoConstants.FALSO) {
            tipo = "boolean";
        } else if (token.kind == linkersOptimizadoConstants.CADENA) {
            tipo = "string";
        } else if (token.kind == linkersOptimizadoConstants.LETRA) {
            tipo = "char";
        }
        else {
            tipo = "error";
        }
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
}

  static final public void declararVariables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:{
      VariableINT();
      break;
      }
    case TipoDatoDecimal:{
      VariableFLOAT();
      break;
      }
    case TipoDatoBooleano:{
      VariableBOOLEAN();
      break;
      }
    case TipoDatoCadena:{
      VariableCADENA();
      break;
      }
    case TIpoDatoCaracter:{
      VariableCARACTER();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
 * Este método `VariableINT` se utiliza para definir una variable de tipo entero (INT).
 * 
 * Variables locales:
 * - `Token id`: Representa el identificador del token.
 * - `int line`: Almacena el número de línea donde se encuentra la variable.
 * - `int column`: Almacena el número de columna donde se encuentra la variable.
 * - `boolean control`: Bandera de control que inicialmente está establecida en falso.
 * 
 * Este método no tiene parámetros de entrada ni valores de retorno.
 */
  static final public void VariableINT() throws ParseException {Token id;
    int line, column;
    boolean control = false;
    try {
      jj_consume_token(TipoDatoEntero);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CorcheteAbre:{
        try {
          jj_consume_token(CorcheteAbre);
Token token = getNextToken();
                    if (token.kind == linkersOptimizadoConstants.NUMERO) {
                        control = true;
                        linkersOptimizado.checkAndAddVariable(id, "int[]", line, column);
                        intermedia.add(new TAC("reserva", token.image, id.image));
                    } else {
                        tabla.add("Error Sem\u00e1ntico -> Tama\u00f1o de arreglo inv\u00e1lido: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    }
          jj_consume_token(CorcheteCierra);
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
if (!control) {
                linkersOptimizado.checkAndAddVariable(id, "int", line, column);
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("int");
            // Generar TAC de asignación si hay inicialización
            String temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC("=", exprResult.place, temp));
            intermedia.add(new TAC("=", temp, id.image));
            // intermedia.add(new TAC("=", exprResult.place, id.image));

        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/**
 * * Inicializa un token para contener el identificador de la variable, y variables para almacenar los números
 * de línea y columna donde se declara la variable. Además, incluye una variable de control booleana para
  * procesamiento adicional.
 * *
 *  * Variables Locales:
 * - Token id: Representa el token identificador para la variable de punto flotante.
 * -  * - int line: Almacena el número de línea donde se declara la variable.
 * - i * - int column: Almacena el número de columna donde se declara la variable.
 * - in * - boolean control: Una bandera de control utilizada para procesamiento o validación adicional.
 */
  static final public void VariableFLOAT() throws ParseException {Token id;
    int line, column;
    boolean control = false;
    try {
      jj_consume_token(TipoDatoDecimal);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CorcheteAbre:{
        try {
          jj_consume_token(CorcheteAbre);
Token token = getNextToken();
                    if (token.kind == linkersOptimizadoConstants.NUMERO) {
                        control = true;
                        linkersOptimizado.checkAndAddVariable(id, "float[]", line, column);
                        intermedia.add(new TAC("reserva", token.image, id.image));
                    } else {
                        tabla.add("Error Sem\u00e1ntico -> Tama\u00f1o de arreglo inv\u00e1lido: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    }
          jj_consume_token(CorcheteCierra);
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
if (!control) {
                linkersOptimizado.checkAndAddVariable(id, "float", line, column);
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("float");
            // Generar tac de asignación si hay inicialización
            String temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC("=", exprResult.place, temp));
            intermedia.add(new TAC("=", temp, id.image));
            // intermedia.add(new TAC("=", exprResult.place, id.image));

        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/**
 * Método que maneja la declaración de variables de tipo BOOLEAN en el compilador.
 * 
 * Variables locales:
 * - Token id: Representa el identificador del token.
 * - int line: Almacena la línea del código fuente donde se encuentra la variable.
 * - int column: Almacena la columna del código fuente donde se encuentra la variable.
 * - boolean control: Bandera de control utilizada en el proceso de manejo de la variable.
 * 
 * Este método es parte del archivo de definiciones del compilador y se encarga de 
 * procesar y validar las declaraciones de variables de tipo BOOLEAN en el código fuente.
 */
  static final public void VariableBOOLEAN() throws ParseException {Token id;
    int line, column;
    boolean control = false;
    try {
      jj_consume_token(TipoDatoBooleano);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CorcheteAbre:{
        try {
          jj_consume_token(CorcheteAbre);
Token token = getNextToken();
                    if (token.kind == linkersOptimizadoConstants.NUMERO) {
                        control = true;
                        linkersOptimizado.checkAndAddVariable(id, "boolean[]", line, column);
                        intermedia.add(new TAC("reserva", token.image, id.image));
                    } else {
                        tabla.add("Error Sem\u00e1ntico -> Tama\u00f1o de arreglo inv\u00e1lido: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    }
          jj_consume_token(CorcheteCierra);
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
if (!control) {
                linkersOptimizado.checkAndAddVariable(id, "boolean", line, column);
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("boolean");
            // Generar tac de asignación si hay inicialización
            String temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC("=", exprResult.place, temp));
            intermedia.add(new TAC("=", temp, id.image));
            // intermedia.add(new TAC("=", exprResult.place, id.image));

        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableCADENA() throws ParseException {Token id;
    int line, column;
    boolean control = false;
    try {
      jj_consume_token(TipoDatoCadena);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CorcheteAbre:{
        try {
          jj_consume_token(CorcheteAbre);
Token token = getNextToken();
                    if (token.kind == linkersOptimizadoConstants.NUMERO) {
                        control = true;
                        linkersOptimizado.checkAndAddVariable(id, "string[]", line, column);
                        intermedia.add(new TAC("reserva", token.image, id.image));
                    } else {
                        tabla.add("Error Sem\u00e1ntico -> Tama\u00f1o de arreglo inv\u00e1lido: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    }
          jj_consume_token(CorcheteCierra);
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
if (!control) {
                linkersOptimizado.checkAndAddVariable(id, "string", line, column);
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("string");
            // Generar TAC de asignación si hay inicialización
            String temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC("=", exprResult.place, temp));
            intermedia.add(new TAC("=", temp, id.image));
            // intermedia.add(new TAC("=", exprResult.place, id.image));

        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableCARACTER() throws ParseException {Token id;
    int line, column;
    boolean control = false;
    try {
      jj_consume_token(TIpoDatoCaracter);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CorcheteAbre:{
        try {
          jj_consume_token(CorcheteAbre);
Token token = getNextToken();
                    if (token.kind == linkersOptimizadoConstants.NUMERO) {
                        control = true;
                        linkersOptimizado.checkAndAddVariable(id, "char[]", line, column);
                        intermedia.add(new TAC("reserva", token.image, id.image));
                    } else {
                        tabla.add("Error Sem\u00e1ntico -> Tama\u00f1o de arreglo inv\u00e1lido: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    }
          jj_consume_token(CorcheteCierra);
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
if (!control) {
                linkersOptimizado.checkAndAddVariable(id, "char", line, column);
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("char");
            // Generar tac de asignación si hay inicialización
            String temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC("=", exprResult.place, temp));
            intermedia.add(new TAC("=", temp, id.image));
            // intermedia.add(new TAC("=", exprResult.place, id.image));

        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/**
 * Este método representa una regla de asignación en un compilador.
 * 
 * Variables locales:
 * - `id`: Un token que representa el identificador de la variable a la que se le asignará un valor.
 * - `varType`: Una cadena que almacena el tipo de la variable. Inicialmente está vacía.
 * - `exprResult`: Un objeto de tipo `ExpressionResult` que almacena el resultado de la expresión que se asignará a la variable.
 * 
 * La implementación de este método debe definir cómo se realiza la asignación de valores a las variables,
 * incluyendo la verificación de tipos y la evaluación de la expresión.
 */
  static final public void asignacion() throws ParseException {Token id;
    String varType = "";
    ExpressionResult exprResult;
    try {
      id = jj_consume_token(IDENTIFICADOR);
if (!linkersOptimizado.declaredVariables.containsKey(id.image)) {
                linkersOptimizado.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + id.image + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            } else {
                varType = linkersOptimizado.declaredVariables.get(id.image);
            }
      jj_consume_token(Asignacion);
exprResult = expresion(varType);
            if (!exprResult.type.equals(varType)) {
                linkersOptimizado.tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n. Se esperaba: " + varType + " pero se obtuvo: " + exprResult.type + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            }
            // Generar TAC de asignación
            String temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC("=", exprResult.place, temp));
            intermedia.add(new TAC("=", temp, id.image));
            // intermedia.add(new TAC("=", exprResult.place, id.image));

      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void entrada() throws ParseException {
    try {
      jj_consume_token(Lectura);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
/**
             * Este fragmento de código consume un token del analizador léxico (lexer) en un compilador.
             * 
             * - `jj_consume_token(linkersOptimizadoConstants.IDENTIFICADOR)`: Esta llamada al método `jj_consume_token` 
             *   consume el siguiente token de la secuencia de entrada si coincide con el tipo de token 
             *   especificado, en este caso `linkersOptimizadoConstants.IDENTIFICADOR`. 
             *   Si el token no coincide, se lanzará una excepción de error de sintaxis.
             * 
             * - `Token token`: La variable `token` almacena el token consumido, que puede ser utilizado 
             *   posteriormente en el análisis sintáctico o semántico.
             */
            Token token = jj_consume_token(linkersOptimizadoConstants.IDENTIFICADOR);
            if (!linkersOptimizado.declaredVariables.containsKey(token.image)) {
                linkersOptimizado.tabla.add("Error Sem\u00e1ntico en entrada-> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
            } else {
                // Generar TAC de lectura
                intermedia.add(new TAC("Leer", token.image));
            }
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/**
 * El método `salida` es un método que no recibe parámetros y devuelve un valor de tipo `void`.
 * 
 * Dentro del bloque de inicialización del método, se declaran dos variables locales:
 * - `res` de tipo `ExpressionResult`.
 * - `temporal` de tipo `TAC`, que se inicializa con una nueva instancia de `TAC`.
 * 
 * El método `salida` no tiene un cuerpo de implementación definido en el código proporcionado,
 * lo que sugiere que podría estar incompleto o que su funcionalidad se define en otra parte.
 * 
 */
  static final public void salida() throws ParseException {ExpressionResult res;
    TAC temporal = new TAC();
    try {
      jj_consume_token(Escritura);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
Token token = getToken(1);
            String temp = "";
            boolean isConcatenation = false;

            // Si unicamente tenemos una cadena, se mostrara directamente 
            if (token.kind == linkersOptimizadoConstants.CADENA) {
                jj_consume_token(linkersOptimizadoConstants.CADENA);
                temp = newTemp();
                temporal = new TAC("ESCRIBIR", token.image);
            } else if (token.kind == linkersOptimizadoConstants.IDENTIFICADOR) {
                // Si es un identificador, verificamos que exista y obtenemos su tipo
                String type = linkersOptimizado.verificarExistenciaYObtenerTipo(token);
                if (!type.equals("error")) {
                    temp = newTemp();
                    temporal = new TAC("ESCRIBIR", token.image);
                }
            } else {
                tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en operaci\u00f3n de escritura. Se esperaba: Cadena o Identificador");
            }

            int cont = 0;
            String temp2 = "";
            while (nextTokenIs(linkersOptimizadoConstants.OperacionSuma)) {
                isConcatenation = true;
                if (cont == 0) {
                    intermedia.add(new TAC("=", temporal.getResult(), temp));
                }
                jj_consume_token(linkersOptimizadoConstants.OperacionSuma);
                token = getToken(1);
                temp = (cont != 0) ? temp2: temp;
                temp2 = newTemp();
                if (token.kind == linkersOptimizadoConstants.CADENA) {
                    jj_consume_token(linkersOptimizadoConstants.CADENA);
                    intermedia.add(new TAC("+", temp, token.image, temp2));
                } else if (token.kind == linkersOptimizadoConstants.IDENTIFICADOR) {
                    jj_consume_token(linkersOptimizadoConstants.IDENTIFICADOR);
                    if (!linkersOptimizado.declaredVariables.containsKey(token.image)) {
                        tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    } else {
                        intermedia.add(new TAC("+", temp, token.image, temp2));
                    }
                } else {
                    tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en operaci\u00f3n de escritura. Se esperaba: Cadena o Identificador" + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    jj_consume_token(token.kind);
                }
                cont += 1;
            }

            if (isConcatenation) {
                intermedia.add(new TAC("ESCRIBIR", temp2));
            } else {
                intermedia.add(temporal);
            }
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void condicionalIf() throws ParseException {String condFalseLabel;
    String endLabel, startLabel, lb;
    ExpressionResult condResult;
    int posicionInicial = 0, posicionPrevCasos = 0;
    try {
endLabel= linkersOptimizado.newLabelNoPoint();
            labelCounter--;
            lb = linkersOptimizado.newLabelNoPoint();
            intermedia.add(new TAC("", ""));  //Salto de linea
            if(!casos.isEmpty()){
                casos.clear();
            }
            if(contadorCondiciones != 0){
                contadorCondiciones = 0;
            }

            if( posicionInicial == 0){
                //posición después de dar un salto de linea
                posicionInicial = intermedia.size() - 1;
                //intermedia.add(new TAC("POSICION : " + (posicionInicial + 1), ""));
            }
      parteIf(lb, endLabel);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CondicionalElse:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        parteElseIf(endLabel);
      }
posicionPrevCasos = intermedia.size() - 1;
            //Esta parte es únicamente para generar el bloque de los IF
            //intermedia.add(new TAC(lb, ""));    //Nueva etiqueta temporal
            for (String iterador : casos) {
                intermedia.add(new TAC(iterador, ""));
            }

            //intermedia.add(new TAC("GOTO ", endLabel));


            posicionInicial = posicionInicial + contadorCondiciones;
            //Tamaño final de la lista hasta añadir todos los case y el final
            int posicionPostCases = intermedia.size() - 1;
            int pos3 = posicionPostCases - posicionPrevCasos;

            //intermedia.add(new TAC("POSICION: " + (posicionPostCases + 1),""));

            ArrayList<TAC> temporal = moverUltimosNAntesDePosicion(intermedia,  pos3, posicionInicial);
            intermedia = temporal;

            //for(int i = posicionInicial; i < posicionPostCases; i++){
            //    // lista, posición inicial, Por quien se va a cambiar
            //    cambiarPosicion(intermedia, posicionPostCases, i);
            //}
            posicionInicial = 0;
            posicionPostCases = 0;
            posicionPrevCasos = 0;

            intermedia.add(new TAC(endLabel, ":"));
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void parteIf(String previousLabel,String endLabel) throws ParseException {String startLabel;
    ExpressionResult condResult;
    jj_consume_token(CondicionalIf);
    try {
      jj_consume_token(ParentesisAbre);
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
startLabel = linkersOptimizado.newLabelNoPoint();
            condResult = condicion();
            //intermedia.add(new TAC("GOTO ", previousLabel));
            contadorCondiciones++;
    try {
      jj_consume_token(ParentesisCierra);
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
casos.add("IF " + condResult.place + " GOTO "+ startLabel);
            //casos.add("GOTO " + endLabel);

    try {
      jj_consume_token(LlaveAbre);
intermedia.add(new TAC(startLabel,""));
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Lectura:
      case Escritura:
      case CondicionalIf:
      case CondicionalIfthen:
      case CondicionalSwitch:
      case CicloWhile:
      case CicloFor:
      case LlamarFuncion:
      case TipoDatoEntero:
      case TipoDatoDecimal:
      case TipoDatoBooleano:
      case TipoDatoCadena:
      case TIpoDatoCaracter:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      sentencias();
    }
    try {
      jj_consume_token(LlaveCierra);
intermedia.add(new TAC("GOTO",endLabel));
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void parteElseIf(String endLabel) throws ParseException {String startLabel = "";
    Token id;
    String nuevaLabel="";
    ExpressionResult condResult;
    ArrayList <String> cPrueba = new ArrayList<>();
    try {
      jj_consume_token(CondicionalElse);
id = getToken(1);
            startLabel = linkersOptimizado.newLabelNoPoint();
            if(id.image != "if"){
                intermedia.add (new TAC(startLabel+":", ""));
            }
            if(id.image == "{"){
                casos.add("GOTO " + startLabel);
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CondicionalIf:{
        jj_consume_token(CondicionalIf);
        try {
          jj_consume_token(ParentesisAbre);
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        condResult = condicion();
        try {
          jj_consume_token(ParentesisCierra);
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
intermedia.add(new TAC(nuevaLabel, ""));
            casos.add("IF " + condResult.place + " GOTO " + startLabel);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      try {
        jj_consume_token(LlaveAbre);

      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case LlamarFuncion:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
        sentencias();
      }
intermedia.add(new TAC("GOTO",endLabel));
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void parteElse(String endLabel) throws ParseException {String startLabel = "";
    Token sent;
    try {
      jj_consume_token(CondicionalElse);
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case LlamarFuncion:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
intermedia.add(new TAC("GOTO ", endLabel));
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

// Método auxiliar para manejar el bloque else opcional
  static final public void condicionalElseBlock() throws ParseException {
    try {
      try {
        jj_consume_token(CondicionalElse);
      } catch (ParseException e) {
// No hay bloque else, regresar
                {if ("" != null) return;}
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case LlamarFuncion:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void condicionalIfthen() throws ParseException {String condFalseLabel;
    ExpressionResult condResult;
    try {
      jj_consume_token(CondicionalIfthen);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
condResult = condicion();
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
condFalseLabel = linkersOptimizado.newLabel();
            // Generar salto condicional
            intermedia.add(new TAC("ifFalse", condResult.place, condFalseLabel));
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case LlamarFuncion:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
// Añadir etiqueta para el fin del bloque ifthen
            intermedia.add(new TAC("LABEL", condFalseLabel));
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void cicloFor() throws ParseException {String startLabel, endLabel;
    ExpressionResult condResult;
    try {
      jj_consume_token(CicloFor);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TipoDatoEntero:
      case TipoDatoDecimal:
      case TipoDatoBooleano:
      case TipoDatoCadena:
      case TIpoDatoCaracter:{
        declararVariables();
        break;
        }
      case IDENTIFICADOR:{
        asignacion();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
startLabel = linkersOptimizado.newLabel();
            intermedia.add(new TAC("",""));
            intermedia.add(new TAC("LABEL", startLabel));
condResult = condicion();
endLabel = linkersOptimizado.newLabel();
            // Generar salto condicional
            intermedia.add(new TAC("ifFalse", condResult.place, endLabel));
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
{

            }
            asignacionLogica();

      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case LlamarFuncion:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_10;
        }
        sentencias();
      }
// Salto al inicio del ciclo
            intermedia.add(new TAC("GOTO", startLabel));
            // Etiqueta de fin del ciclo
            intermedia.add(new TAC("LABEL", endLabel));
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void asignacionLogica() throws ParseException {Token id, num;
    String varType = "", oper;
    ExpressionResult exprResult;
    try {
      id = jj_consume_token(IDENTIFICADOR);
if (!linkersOptimizado.declaredVariables.containsKey(id.image)) {
                linkersOptimizado.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + id.image + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            } else {
                varType = linkersOptimizado.declaredVariables.get(id.image);
            }
String tmp1 = linkersOptimizado.newTemp();
            intermedia.add(new TAC("=", "0", tmp1));
            intermedia.add(new TAC("=", tmp1, id.image));
      oper = operadorAritmetico();
exprResult = expresion(varType);
            if (!exprResult.type.equals(varType)) {
                linkersOptimizado.tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n. Se esperaba: " + varType + " pero se obtuvo: " + exprResult.type + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            }
            // Generar TAC de asignación
            String temp = linkersOptimizado.newTemp();
      num = jj_consume_token(NUMERO);
intermedia.add(new TAC("=", exprResult.place + num.image, temp));
            intermedia.add(new TAC("=", temp, id.image));
    } catch (ParseException e) {

    }
}

  static final public void cicloWhile() throws ParseException {String startLabel, endLabel;
    ExpressionResult condResult;
    try {
      jj_consume_token(CicloWhile);
intermedia.add(new TAC("", ""));
            startLabel = linkersOptimizado.newLabel();
            intermedia.add(new TAC("LABEL", startLabel));
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
condResult = condicion();
endLabel = linkersOptimizado.newLabel();
            // Generar salto condicional
            intermedia.add(new TAC("ifFalse", condResult.place, endLabel));
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case LlamarFuncion:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
        sentencias();
      }
// Salto al inicio del ciclo
            intermedia.add(new TAC("GOTO", startLabel));
            // Etiqueta de fin del ciclo
            intermedia.add(new TAC("LABEL", endLabel));
      asignacionLogica();
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void condicionalSwitch() throws ParseException {Token id;
    ExpressionResult exprResult;
    int tmp = 0, posicionInicial = 0, posicionPrevCasos = 0;
    try {
      jj_consume_token(CondicionalSwitch);
      jj_consume_token(ParentesisAbre);
      id = jj_consume_token(IDENTIFICADOR);
if (!casos.isEmpty()){
                casos.clear();
            }
            String tmp1 = linkersOptimizado.newTemp();
            labelCounter--;
            String lb = linkersOptimizado.newLabelNoPoint();
            String lbFin = linkersOptimizado.newLabelNoPoint();
            intermedia.add(new TAC("", "")); //Salto de linea
            intermedia.add(new TAC("=", id.image, tmp1));
            if( posicionInicial == 0){
                //posición después de dar un salto de linea
                posicionInicial = intermedia.size() - 1;
            }
      jj_consume_token(ParentesisCierra);
      jj_consume_token(LlaveAbre);
if (!linkersOptimizado.declaredVariables.containsKey(id.image)) {
                linkersOptimizado.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + id.image + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Caso:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_12;
        }
cases = cases + 1;
            tmp = tempVarCounter - cases;
        caso(tmp,lbFin);
      }
posicionPrevCasos = intermedia.size() - 1;
            //intermedia.add(new TAC(lb, ""));

            for (String iterador : casos) {
                intermedia.add(new TAC(iterador, ""));
            }

            posicionInicial = posicionInicial + contadorCondiciones - 1;
            int posicionPostCases = intermedia.size() - 1;
            int pos3 = posicionPostCases - posicionPrevCasos;

            ArrayList<TAC> temporal = moverUltimosNAntesDePosicion(intermedia,  pos3, posicionInicial);
            intermedia = temporal;

            //Label final
            //intermedia.add(new TAC("GOTO ", lbFin));
            intermedia.add(new TAC(lbFin, ""));

            posicionInicial = 0;
            posicionPostCases = 0;
            posicionPrevCasos = 0;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Default:{
        defaultCaso();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(LlaveCierra);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != LlaveCierra && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void caso(int opcion, String labelFin) throws ParseException {Token caseValue, idnext, id;
    jj_consume_token(Caso);
    caseValue = jj_consume_token(NUMERO);
    jj_consume_token(DelimitadorCasoSwitch);
id = getToken(-1);
        idnext = getToken(1);
        String LABEL = linkersOptimizado.newLabelNoPoint();
        intermedia.add(new TAC("LABEL", LABEL+":"));
        //intermedia.add(new TAC("if", id.image + " == " + caseValue.image, "GOTO " + LABEL));
        casos.add("if " + ("t" + opcion) + " == " + caseValue.image + " GOTO " + LABEL);
        //intermedia.add(new TAC(image.))

    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Lectura:
      case Escritura:
      case CondicionalIf:
      case CondicionalIfthen:
      case CondicionalSwitch:
      case CicloWhile:
      case CicloFor:
      case LlamarFuncion:
      case TipoDatoEntero:
      case TipoDatoDecimal:
      case TipoDatoBooleano:
      case TipoDatoCadena:
      case TIpoDatoCaracter:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
      sentencias();
    }
intermedia.add(new TAC("GOTO "+labelFin, ""));
    jj_consume_token(Break);
    jj_consume_token(DelimitadorLineaDeCodigo);
}

  static final public void defaultCaso() throws ParseException {String LABEL = linkersOptimizado.newLabel();
    jj_consume_token(Default);
    jj_consume_token(DelimitadorCasoSwitch);
intermedia.add(new TAC("LABEL", LABEL));
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Lectura:
      case Escritura:
      case CondicionalIf:
      case CondicionalIfthen:
      case CondicionalSwitch:
      case CicloWhile:
      case CicloFor:
      case LlamarFuncion:
      case TipoDatoEntero:
      case TipoDatoDecimal:
      case TipoDatoBooleano:
      case TipoDatoCadena:
      case TIpoDatoCaracter:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_14;
      }
      sentencias();
    }
}

  static final public void procedimiento() throws ParseException {Token id;
    String startLabel, endLabel;
    ArrayList<Parameter> parameters = new ArrayList<>();
    try {
      jj_consume_token(NoRetorno);
      id = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ParentesisAbre);
parameters = listaParametros();
      jj_consume_token(ParentesisCierra);
      jj_consume_token(Start);
startLabel = linkersOptimizado.newLabel();
            endLabel = linkersOptimizado.newLabel();
            intermedia.add(new TAC("LABEL", startLabel)); // Etiqueta de inicio del procedimiento
            // Agregar los parámetros a la tabla de variables declaradas
            for (Parameter param : parameters) {
                linkersOptimizado.declaredVariables.put(param.name, param.type);
            }
      label_15:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case LlamarFuncion:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_15;
        }
      }
intermedia.add(new TAC("GOTO", endLabel)); // Salto al final del procedimiento
            intermedia.add(new TAC("", endLabel)); // Etiqueta de fin del procedimiento

      jj_consume_token(End);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != linkersOptimizadoConstants.LlaveCierra && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public ArrayList<Parameter> listaParametros() throws ParseException {ArrayList<Parameter> parameters = new ArrayList<>();
    Parameter param;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:
    case TipoDatoDecimal:
    case TipoDatoBooleano:
    case TipoDatoCadena:
    case TIpoDatoCaracter:{
      param = parametro();
parameters.add(param);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Coma:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_16;
        }
        jj_consume_token(Coma);
        param = parametro();
parameters.add(param);
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
{if ("" != null) return parameters;}
    throw new Error("Missing return statement in function");
}

  static final public Parameter parametro() throws ParseException {Token id;
    String type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:{
      jj_consume_token(TipoDatoEntero);
type = "int";
      break;
      }
    case TipoDatoDecimal:{
      jj_consume_token(TipoDatoDecimal);
type = "float";
      break;
      }
    case TipoDatoBooleano:{
      jj_consume_token(TipoDatoBooleano);
type = "boolean";
      break;
      }
    case TipoDatoCadena:{
      jj_consume_token(TipoDatoCadena);
type = "string";
      break;
      }
    case TIpoDatoCaracter:{
      jj_consume_token(TIpoDatoCaracter);
type = "char";
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    id = jj_consume_token(IDENTIFICADOR);
{if ("" != null) return new Parameter(id.image, type);}
    throw new Error("Missing return statement in function");
}

  static final public void funcion() throws ParseException {Token id;
    String startLabel, endLabel;
    ArrayList<Parameter> parameters = new ArrayList<>();
    String returnType = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLICO:{
        jj_consume_token(PUBLICO);
        break;
        }
      case PRIVADO:{
        jj_consume_token(PRIVADO);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TipoDatoEntero:{
        jj_consume_token(TipoDatoEntero);
returnType = "int";
        break;
        }
      case TipoDatoDecimal:{
        jj_consume_token(TipoDatoDecimal);
returnType = "float";
        break;
        }
      case TipoDatoCadena:{
        jj_consume_token(TipoDatoCadena);
returnType = "string";
        break;
        }
      case TIpoDatoCaracter:{
        jj_consume_token(TIpoDatoCaracter);
returnType = "char";
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ParentesisAbre);
parameters = listaParametros();
      jj_consume_token(ParentesisCierra);
      jj_consume_token(Start);
startLabel = linkersOptimizado.newLabel();
            endLabel = linkersOptimizado.newLabel();
            intermedia.add(new TAC("LABEL", startLabel)); // Etiqueta de inicio de la función
            // Agregar los parámetros a la tabla de variables declaradas
            for (Parameter param : parameters) {
                linkersOptimizado.declaredVariables.put(param.name, param.type);
            }
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case LlamarFuncion:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_17;
        }
        sentencias();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Retorno:{
        retorno(returnType);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
intermedia.add(new TAC("GOTO", endLabel)); // Salto al final de la función
            intermedia.add(new TAC("LABEL", endLabel)); // Etiqueta de fin de la función

      jj_consume_token(End);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != linkersOptimizadoConstants.LlaveCierra && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void retorno(String returnType) throws ParseException {ExpressionResult exprResult;
    try {
      jj_consume_token(Retorno);
exprResult = expresion(returnType);
            if (!exprResult.type.equals(returnType)) {
                tabla.add("Error Sem\u00e1ntico -> Tipo de retorno incorrecto. Se esperaba: " + returnType + " pero se obtuvo: " + exprResult.type);
            }
            // Generar TAC de retorno
            intermedia.add(new TAC("return", exprResult.place));
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public ExpressionResult llamadaFuncion() throws ParseException {Token id;
    ArrayList<ExpressionResult> argumentos = new ArrayList<>();
    String funcName;
    String returnType = "";
    try {
      jj_consume_token(LlamarFuncion);
      id = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ParentesisAbre);
funcName = id.image;
            if (!linkersOptimizado.declaredVariables.containsKey(funcName)) {
                linkersOptimizado.tabla.add("Error Sem\u00e1ntico -> Funci\u00f3n no declarada: " + funcName + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            } else {
                returnType = linkersOptimizado.declaredVariables.get(funcName);
            }
      argumentos = listaArgumentos();
      jj_consume_token(ParentesisCierra);
// Generar TAC para la llamada a la función
        String temp = linkersOptimizado.newTemp();
        intermedia.add(new TAC("call", funcName, temp));
        for (ExpressionResult arg : argumentos) {
            intermedia.add(new TAC("param", arg.place));
        }
        {if ("" != null) return new ExpressionResult(returnType, temp);}
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<ExpressionResult> listaArgumentos() throws ParseException {ArrayList<ExpressionResult> argumentos = new ArrayList<>();
    ExpressionResult arg;
    arg = expresion("any");
argumentos.add(arg);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Coma:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_18;
      }
      jj_consume_token(Coma);
      arg = expresion("any");
argumentos.add(arg);
    }
{if ("" != null) return argumentos;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult condicion() throws ParseException {ExpressionResult left, right;
    String op;
    left = condicionSimple();
if (nextTokenIsOperatorLogico()) { // Verificamos si viene un operador lógico
            op = operadorLogico();
            right = condicionSimple();
            String temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC(op, left.place, right.place, temp));
            left = new ExpressionResult("boolean", temp);
        }
contadorCondiciones++;
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult condicionSimple() throws ParseException {Token token1, token2;
    String type1 = "", type2 = "";
    String op;
    ExpressionResult left, right;
left = valor("any"); // Permitir cualquier tipo
        op = operadorRelacional();
        right = valor("any"); // Permitir cualquier tipo

        // Verificar que ambos operandos sean del mismo tipo o tipos compatibles
        if (!left.type.equals(right.type) && !left.type.equals("error") && !right.type.equals("error")) {
            tabla.add("Error Sem\u00e1ntico en condici\u00f3n-> Tipos incompatibles en la condici\u00f3n: " + left.type + " y " + right.type);
        }

        // Generar una variable temporal para el resultado booleano
        String temp = linkersOptimizado.newTemp();
        intermedia.add(new TAC(op, left.place, right.place, temp));

        {if ("" != null) return new ExpressionResult("boolean", temp);}
    throw new Error("Missing return statement in function");
}

  static final public String operadorRelacional() throws ParseException {Token opToken;
    String opStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionMayorQue:{
      opToken = jj_consume_token(OperacionMayorQue);
opStr = ">";
      break;
      }
    case OperacionMenorQue:{
      opToken = jj_consume_token(OperacionMenorQue);
opStr = "<";
      break;
      }
    case OperacionMenorOIgualQue:{
      opToken = jj_consume_token(OperacionMenorOIgualQue);
opStr = "<=";
      break;
      }
    case OperacionMayorOIgualQue:{
      opToken = jj_consume_token(OperacionMayorOIgualQue);
opStr = ">=";
      break;
      }
    case OperacionIgualdad:{
      opToken = jj_consume_token(OperacionIgualdad);
opStr = "==";
      break;
      }
    case OperacionDesigualdad:{
      opToken = jj_consume_token(OperacionDesigualdad);
opStr = "!=";
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return opStr;}
    throw new Error("Missing return statement in function");
}

  static final public String operadorLogico() throws ParseException {Token opToken;
    String opStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionAnd:{
      opToken = jj_consume_token(OperacionAnd);
opStr = "&";
      break;
      }
    case OperacionOr:{
      opToken = jj_consume_token(OperacionOr);
opStr = "|";
      break;
      }
    case OperacionNot:{
      opToken = jj_consume_token(OperacionNot);
opStr = "!";
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return opStr;}
    throw new Error("Missing return statement in function");
}

  static final public String operadorAritmetico() throws ParseException {Token opToken;
    String opStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionSuma:{
      opToken = jj_consume_token(OperacionSuma);
opStr = "+";
      break;
      }
    case OperacionResta:{
      opToken = jj_consume_token(OperacionResta);
opStr = "-";
      break;
      }
    case OperacionMultiplicacion:{
      opToken = jj_consume_token(OperacionMultiplicacion);
opStr = "*";
      break;
      }
    case OperacionDivision:{
      opToken = jj_consume_token(OperacionDivision);
opStr = "/";
      break;
      }
    case OperacionResiduo:{
      opToken = jj_consume_token(OperacionResiduo);
opStr = "%";
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return opStr;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult expresion(String expectedType) throws ParseException {ExpressionResult left, right;
    String op;
    left = termino(expectedType);
if (nextTokenIsOperadorAritmetico()) {
            op = operadorAritmetico();
            right = termino(expectedType);

            // Verificar si la operación es válida según el tipo esperado
            if (op.equals("+") && (left.type.equals("string") || right.type.equals("string"))) {
                // Si es concatenación y alguno es cadena, convertimos ambos operandos a cadena
                if (!left.type.equals("string")) {
                    String tempLeft = linkersOptimizado.newTemp();
                    intermedia.add(new TAC("toString", left.place, tempLeft));
                    left = new ExpressionResult("string", tempLeft);
                }
                if (!right.type.equals("string")) {
                    String tempRight = linkersOptimizado.newTemp();
                    intermedia.add(new TAC("toString", right.place, tempRight));
                    right = new ExpressionResult("string", tempRight);
                }
            }
            else if (!left.type.equals(right.type)) {
                // Si no son compatibles, generamos un error
                tabla.add("Error Sem\u00e1ntico en expresi\u00f3n-> Tipos incompatibles: " + left.type + " y " + right.type);
            }

            // Generamos el código intermedio con una nueva variable temporal
            String temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC(op, left.place, right.place, temp));
            left = new ExpressionResult(expectedType, temp);
        }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult termino(String expectedType) throws ParseException {ExpressionResult left, right;
    String op;
    left = factor(expectedType);
if (nextTokenIsOperadorAritmetico()) {
            op = operadorAritmetico();
            right = factor(expectedType); // Procesamos el siguiente factor

            if (!left.type.equals(expectedType) || !right.type.equals(expectedType)) {
                // Si los tipos no coinciden con lo esperado, lanzamos un error
                tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en operaci\u00f3n. Se esperaba: " + expectedType);
            }

            // Generamos el código intermedio
            String temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC(op, left.place, right.place, temp));
            left = new ExpressionResult(expectedType, temp);
        }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult factor(String expectedType) throws ParseException {Token token = null;
    String type = "";
    String place = "";
    ExpressionResult res = null; // Inicialización corregida

    try {
if (nextTokenIs(linkersOptimizadoConstants.ParentesisAbre)) {
            res = operacionParentesis(expectedType);
            type = res.type;
            place = res.place;
        } else if (nextTokenIs(linkersOptimizadoConstants.NUMERO)) {
            token = jj_consume_token(linkersOptimizadoConstants.NUMERO);
            type = "int";
            place = token.image;
        } else if (nextTokenIs(linkersOptimizadoConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersOptimizadoConstants.NUMERO_FLOTANTE);
            type = "float";
            place = token.image;
        } else if (nextTokenIs(linkersOptimizadoConstants.VERDADERO)) {
            token = jj_consume_token(linkersOptimizadoConstants.VERDADERO);
            type = "boolean";
            place = "1";
        } else if (nextTokenIs(linkersOptimizadoConstants.FALSO)) {
            token = jj_consume_token(linkersOptimizadoConstants.FALSO);
            type = "boolean";
            place = "0";
        } else if(nextTokenIs(linkersOptimizadoConstants.CADENA)) {
            token = jj_consume_token(linkersOptimizadoConstants.CADENA);
            type = "string";
            place = token.image;
        } else if (nextTokenIs(linkersOptimizadoConstants.LETRA)) {
            token = jj_consume_token(linkersOptimizadoConstants.LETRA);
            type = "character";
            place = token.image;
        } else if (nextTokenIs(linkersOptimizadoConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersOptimizadoConstants.IDENTIFICADOR);
            if (linkersOptimizado.declaredVariables.containsKey(token.image)) {
                type = linkersOptimizado.declaredVariables.get(token.image);
                place = token.image;
            } else {
                tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                type = "error";
            }
        } else if (nextTokenIs(linkersOptimizadoConstants.Funcion)) {
            res = llamadaFuncion();
            type = res.type;
            place = res.place;
        } else {
            type = "error";
        }
if (token != null && !"any".equals(expectedType) && !type.equals(expectedType) && !type.equals("error")) {
            tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto. Se esperaba: " + expectedType + " pero se obtuvo: " + type + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
{if ("" != null) return (res != null) ? res : new ExpressionResult(type, place);}
    throw new Error("Missing return statement in function");
}

  static final public boolean nextTokenIs(int kind) throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == kind;}
    throw new Error("Missing return statement in function");
}

// Métodos auxiliares para detectar operadores
  static final public boolean nextTokenIsOperatorLogico() throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == linkersOptimizadoConstants.OperacionAnd || t.kind == linkersOptimizadoConstants.OperacionOr || t.kind == linkersOptimizadoConstants.OperacionNot;}
    throw new Error("Missing return statement in function");
}

  static final public boolean nextTokenIsOperadorAritmetico() throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == linkersOptimizadoConstants.OperacionSuma || t.kind == linkersOptimizadoConstants.OperacionResta ||
           t.kind == linkersOptimizadoConstants.OperacionMultiplicacion || t.kind == linkersOptimizadoConstants.OperacionDivision ||
           t.kind == linkersOptimizadoConstants.OperacionResiduo;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult operacionParentesis(String expectedType) throws ParseException {ExpressionResult res=null;
    try {
jj_consume_token(linkersOptimizadoConstants.ParentesisAbre);
        res = expresion(expectedType);
        jj_consume_token(linkersOptimizadoConstants.ParentesisCierra);

        if (!res.type.equals(expectedType)) {
            tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n entre par\u00e9ntesis. Se esperaba: " + expectedType + " pero se obtuvo: " + res.type);
        }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult valor(String expectedType) throws ParseException {Token token = null;
    String type = "";
    String place = "";
    try {
if (nextTokenIs(linkersOptimizadoConstants.NUMERO)) {
            token = jj_consume_token(linkersOptimizadoConstants.NUMERO);
            type = "int";
            place = token.image;
        } else if (nextTokenIs(linkersOptimizadoConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersOptimizadoConstants.NUMERO_FLOTANTE);
            type = "float";
            place = token.image;
        } else if (nextTokenIs(linkersOptimizadoConstants.VERDADERO)) {
            token = jj_consume_token(linkersOptimizadoConstants.VERDADERO);
            type = "boolean";
            place = "1";
        } else if (nextTokenIs(linkersOptimizadoConstants.FALSO)) {
            token = jj_consume_token(linkersOptimizadoConstants.FALSO);
            type = "boolean";
            place = "0";
        } else if(nextTokenIs(linkersOptimizadoConstants.CADENA)) {
            token = jj_consume_token(linkersOptimizadoConstants.CADENA);
            type = "string";
            place = token.image;
        } else if (nextTokenIs(linkersOptimizadoConstants.LETRA)) {
            token = jj_consume_token(linkersOptimizadoConstants.LETRA);
            type = "character";
            place = token.image;
        } else if (nextTokenIs(linkersOptimizadoConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersOptimizadoConstants.IDENTIFICADOR);
            if (linkersOptimizado.declaredVariables.containsKey(token.image)) {
                type = linkersOptimizado.declaredVariables.get(token.image);
                place = token.image;
            } else {
                tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                type = "error";
            }
        } else {
            tabla.add("Error Sem\u00e1ntico -> Token inesperado en la condici\u00f3n.");
            {if (true) throw new ParseException("Token inesperado en la condici\u00f3n.");}
        }
if (token != null && !"any".equals(expectedType) && !type.equals(expectedType) && !type.equals("error")) {
            tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto. Se esperaba: " + expectedType + " pero se obtuvo: " + type + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        {if (true) throw e;}
    }
{if ("" != null) return new ExpressionResult(type, place);}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult concatenar() throws ParseException {ExpressionResult left, right;
    String temp;
    Token token = null;
    left = expresion("string");
if (nextTokenIsOperadorAritmetico() && getToken(1).image.equals("+")) { // Concatenación con operador "+"
        jj_consume_token(linkersOptimizadoConstants.OperacionSuma); // Consumimos el "+" operador

        // Evaluamos el siguiente valor en la concatenación
        right = expresion("string");

        // Si los tipos no son compatibles, convertimos a cadena
        if (!left.type.equals("string")) {
            temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC("toString", left.place, temp)); // Conversión a cadena
            left = new ExpressionResult("string", temp);
        }
        if (!right.type.equals("string")) {
            temp = linkersOptimizado.newTemp();
            intermedia.add(new TAC("toString", right.place, temp)); // Conversión a cadena
            right = new ExpressionResult("string", temp);
        }

        // Generamos una nueva variable temporal para la concatenación
        temp = linkersOptimizado.newTemp();
        intermedia.add(new TAC("+", left.place, right.place, temp));
        left = new ExpressionResult("string", temp);
        }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public linkersOptimizadoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xfc003dc,0x20000,0x18000,0xfc003dc,0xf800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0xfc003dc,0x10,0xfc003dc,0xfc003dc,0xfc003dc,0xfc003dc,0xf800000,0xfc003dc,0xfc003dc,0x800,0x400,0xfc003dc,0xfc003dc,0xfc003dc,0x0,0xf800000,0xf800000,0x18000,0xd800000,0xfc003dc,0x200000,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x200000,0x0,0x0,0x200000,0x0,0x4,0x400,0x4,0x400,0x4,0x400,0x4,0x400,0x4,0x400,0x0,0x200000,0x0,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x0,0x0,0x200000,0x200000,0x200000,0x10,0x0,0x0,0x0,0x0,0x200000,0x0,0x10,0x1f800,0xe0000,0x3e0,};
	}

  /** Constructor with InputStream. */
  public linkersOptimizado(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public linkersOptimizado(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new linkersOptimizadoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public linkersOptimizado(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new linkersOptimizadoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new linkersOptimizadoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public linkersOptimizado(linkersOptimizadoTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(linkersOptimizadoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[62];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 41; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 62; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
