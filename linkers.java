/* linkers.java */
/* Generated By:JavaCC: Do not edit this line. linkers.java */
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.*;

class linkers implements linkersConstants {

    static ArrayList<String> tabla = linkersTokenManager.tablaErrores;
    static Map<String, String> declaredVariables = new HashMap<String, String>();
    static int tmpContador = 0;
    static int labelContador = 0;
    static List<String> code = new ArrayList<>();
    static String varCondicion = "", varCadena = "";
    static List<String> sentencias = new ArrayList<>();

    public static void main(String[] args) {
        try {
            linkers link = new linkers(System.in);
            link.Programalink();

            if (!link.tabla.isEmpty()) {
                System.out.println("\u001b[31m\nErrores encontrados:\n\u001b[0m");
                for (String error : link.tabla) {
                    System.out.println(error);
                }
            } else {
                System.out.println("\u001b[32mAn\u00e1lisis exitoso\u001b[0m");

        //Para el cÃ³digo intermedio
        for (String instruction : code) {
                    System.out.println(instruction);
                }
            }

        } catch (ParseException e) {
            System.out.println("Error de An\u00e1lisis -> " + e.getMessage());
        }
    }

    static void checkAndAddVariable(Token id, String type, int line, int column) {
        if (declaredVariables.containsKey(id.image)) {
            tabla.add("Error Sem\u00e1ntico -> Variable repetida: " + id.image + " en l\u00ednea " + line + ", columna " + column);
        } else {
            declaredVariables.put(id.image, type);
        }
    }

    static String newTemp(){
            return "t" + tmpContador++;
    }

    static String nuevoLabel(){
        return "L" + labelContador++;
    }

    static void addInstruccion(String instruccion){
        code.add(instruccion);
    }

    static void addOperacion(String resultado, String op1, String operador, String op2){
        code.add(resultado + " = " + op1 + " " + operador + " " + op2);
    }

  static final public void Programalink() throws ParseException {
    try {
      try {
        jj_consume_token(ReservadaInicio);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      jj_consume_token(0);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOF);

        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void sentencias() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:
    case TipoDatoDecimal:
    case TipoDatoBooleano:{
      declararVariables();
      break;
      }
    case IDENTIFICADOR:{
      asignacion();
      break;
      }
    case Lectura:{
      entrada();
      break;
      }
    case Escritura:{
      salida();
      break;
      }
    case CondicionalIf:{
      condicionalIf();
      break;
      }
    case CondicionalIfthen:{
      condicionalIfthen();
      break;
      }
    case CondicionalSwitch:{
      condicionalSwitch();
      break;
      }
    case CicloFor:{
      cicloFor();
      break;
      }
    case CicloWhile:{
      cicloWhile();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

////////////////////////////////////////     MANEJO DE SEMANTICO PARA VARIABLES    ///////////////////////////////////////////////
  static final public 
void verificarExistenciaVariable(Token token) throws ParseException {
if (!linkers.declaredVariables.containsKey(token.image)) {
            linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
}

  static final public String verificarExistenciaYObtenerTipo(Token token) throws ParseException {String tipo;
if (token.kind == linkersConstants.IDENTIFICADOR) {
            if (linkers.declaredVariables.containsKey(token.image)) {
                tipo = linkers.declaredVariables.get(token.image);
            } else {
                linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                tipo = "error";
            }
        } else if (token.kind == linkersConstants.NUMERO) {
            tipo = "int";
        } else if (token.kind == linkersConstants.NUMERO_FLOTANTE) {
            tipo = "float";
        } else if (token.kind == linkersConstants.VERDADERO || token.kind == linkersConstants.FALSO) {
            tipo = "boolean";
        } else {
            tipo = "error";
        }
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
}

///////////////////////////////////////////    VARIABLES    ////////////////////////////////////////////
  static final public 
void declararVariables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:{
      VariableINT();
      break;
      }
    case TipoDatoDecimal:{
      VariableFLOAT();
      break;
      }
    case TipoDatoBooleano:{
      VariableBOOLEAN();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void VariableINT() throws ParseException {Token id, tmpValor;
    int line, column;
    try {
      jj_consume_token(TipoDatoEntero);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "int", line, column);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
        try {
          tmpValor = jj_consume_token(NUMERO);
addInstruccion(id.image + " = " + tmpValor.image);
        } catch (ParseException e) {
linkers.tabla.add("Error Sem\u00e1ntico -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableFLOAT() throws ParseException {Token id, tmpValor;
    int line, column;
    try {
      jj_consume_token(TipoDatoDecimal);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "float", line, column);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
        try {
          tmpValor = jj_consume_token(NUMERO_FLOTANTE);
addInstruccion(id.image + " = " + tmpValor.image);
        } catch (ParseException e) {
linkers.tabla.add("Error Sem\u00e1ntico -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);

    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableBOOLEAN() throws ParseException {Token id,tmpValor;
    int line, column;
    try {
      jj_consume_token(TipoDatoBooleano);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "boolean", line, column);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VERDADERO:{
            tmpValor = jj_consume_token(VERDADERO);
addInstruccion(id.image + " = " + tmpValor.image);
            break;
            }
          case FALSO:{
            tmpValor = jj_consume_token(FALSO);
addInstruccion(id.image + " = " + tmpValor.image);
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
linkers.tabla.add("Error Sem\u00e1ntico -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void asignacion() throws ParseException {Token id;
    String varType = "";
    String type = "";
    try {
      id = jj_consume_token(IDENTIFICADOR);
if (!linkers.declaredVariables.containsKey(id.image)) {
                linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + id.image + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            } else {
                varType = linkers.declaredVariables.get(id.image);
            }
      jj_consume_token(Asignacion);
type = expresion(varType);
            if (!type.equals(varType)) {
                linkers.tabla.add("Error Sem\u00e1ntico 2-> Tipo incorrecto en la operaci\u00f3n. Se esperaba: " + varType + " pero se obtuvo: " + type + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/////////////////////////////////////////   ENTRADA Y SALIDA   //////////////////////////////////////////////
  static final public 
void entrada() throws ParseException {
    try {
      jj_consume_token(Lectura);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
Token token = jj_consume_token(linkersConstants.IDENTIFICADOR);
        if (!linkers.declaredVariables.containsKey(token.image)) {
            linkers.tabla.add("Error Sem\u00e1ntico en entrada-> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void salida() throws ParseException {varCadena = "";
    try {
      jj_consume_token(Escritura);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
Token token = getToken(1);

        if (token.kind == linkersConstants.CADENA) {
            jj_consume_token(linkersConstants.CADENA);
            varCadena += token.image;

        } else if (token.kind == linkersConstants.IDENTIFICADOR) {
            jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (!linkers.declaredVariables.containsKey(token.image)) {
                linkers.tabla.add("Error Sem\u00e1ntico en salida-> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
            }
            varCadena += token.image;

        } else {
            linkers.tabla.add("Error de Sintaxis -> Se esperaba una cadena o un identificador, pero se encontr\u00f3: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
            jj_consume_token(token.kind); // Consumir el token inesperado para continuar
        }

        while (nextTokenIs(linkersConstants.OperacionSuma)) {
            jj_consume_token(linkersConstants.OperacionSuma);
            token = getToken(1);
            if (token.kind == linkersConstants.CADENA) {
                jj_consume_token(linkersConstants.CADENA);
                varCadena += token.image + " ";
            } else if (token.kind == linkersConstants.IDENTIFICADOR) {
                jj_consume_token(linkersConstants.IDENTIFICADOR);
                if (!linkers.declaredVariables.containsKey(token.image)) {
                    linkers.tabla.add("Error Sem\u00e1ntico en salida-> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                }
                varCadena += token.image + " ";
            } else {
                linkers.tabla.add("Error de Sintaxis -> Se esperaba una cadena o un identificador, pero se encontr\u00f3: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                jj_consume_token(token.kind); // Consumir el token inesperado para continuar
            }
        }
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
addInstruccion("print " + varCadena);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/////////////////////////////////////////     CONDICIONALES   //////////////////////////////////////////////
  static final public 
void condicionalIf() throws ParseException {Token id;
    String L1 = nuevoLabel();
    String L2 = nuevoLabel();
    try {
      id = jj_consume_token(CondicionalIf);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      condicion();
      try {
        jj_consume_token(ParentesisCierra);
addInstruccion(id.image + " " + varCondicion + " " + "goto " + L1);
                addInstruccion(L1 + ":");
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CondicionalElse:{
        jj_consume_token(CondicionalElse);
        try {
          jj_consume_token(LlaveAbre);
addInstruccion(L2 + ":");
        } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case Lectura:
          case Escritura:
          case CondicionalIf:
          case CondicionalIfthen:
          case CondicionalSwitch:
          case CicloWhile:
          case CicloFor:
          case TipoDatoEntero:
          case TipoDatoDecimal:
          case TipoDatoBooleano:
          case IDENTIFICADOR:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_3;
          }
          sentencias();
        }
        try {
          jj_consume_token(LlaveCierra);
        } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void condicionalIfthen() throws ParseException {
    try {
      jj_consume_token(CondicionalIfthen);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      condicion();
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void condicionalSwitch() throws ParseException {
    try {
      jj_consume_token(CondicionalSwitch);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      jj_consume_token(IDENTIFICADOR);
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Caso:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(Caso);
        jj_consume_token(NUMERO);
        jj_consume_token(DelimitadorCasoSwitch);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case Lectura:
          case Escritura:
          case CondicionalIf:
          case CondicionalIfthen:
          case CondicionalSwitch:
          case CicloWhile:
          case CicloFor:
          case TipoDatoEntero:
          case TipoDatoDecimal:
          case TipoDatoBooleano:
          case IDENTIFICADOR:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
          sentencias();
        }
        try {
          jj_consume_token(Break);
        } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        try {
          jj_consume_token(DelimitadorLineaDeCodigo);
        } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Default:{
        jj_consume_token(Default);
        jj_consume_token(DelimitadorCasoSwitch);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case Lectura:
          case Escritura:
          case CondicionalIf:
          case CondicionalIfthen:
          case CondicionalSwitch:
          case CicloWhile:
          case CicloFor:
          case TipoDatoEntero:
          case TipoDatoDecimal:
          case TipoDatoBooleano:
          case IDENTIFICADOR:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_7;
          }
          sentencias();
        }
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/////////////////////////////////////////////     CICLOS      //////////////////////////////////////////
  static final public void cicloFor() throws ParseException {Token id;
    String L1 = nuevoLabel();
    String L2 = nuevoLabel();
    try {
      id = jj_consume_token(CicloFor);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TipoDatoEntero:
      case TipoDatoDecimal:
      case TipoDatoBooleano:{
        declararVariables();
        break;
        }
      case IDENTIFICADOR:{
        asignacion();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      condicion();
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
addInstruccion(id.image + varCondicion + "goto " + L1);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      jj_consume_token(IDENTIFICADOR);
      operadorAritmetico();
      jj_consume_token(NUMERO);
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
addInstruccion("goto " + L1);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void cicloWhile() throws ParseException {Token id;
    String L1, L2;
    L1 = nuevoLabel();
    L2 = nuevoLabel();
    try {
      id = jj_consume_token(CicloWhile);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      condicion();
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CondicionalSwitch:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        sentencias();
      }
addInstruccion(L1 + ":");
            addInstruccion(id.image +  " " + varCondicion + " goto " + L1);
            addInstruccion (L2 + ":");
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/////////////////////////////////////////////     AUXILIARES DE CONDICIONES   //////////////////////////////////////////
  static final public void condicion() throws ParseException {
    condicionSimple();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OperacionAnd:
      case OperacionOr:
      case OperacionNot:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
      operadorLogico();
      condicionSimple();
    }
}

  static final public void condicionSimple() throws ParseException {Token token1, token2, tokenoperador;
    String type1 = "", type2 = "";
token1 = valor();
        type1 = verificarExistenciaYObtenerTipo(token1);

        tokenoperador = operadorRelacional();

        token2 = valor();
        type2 = verificarExistenciaYObtenerTipo(token2);

        {
            String resultado = token1.image + tokenoperador.image + token2.image;
            addInstruccion(resultado);
            varCondicion = token1.image + tokenoperador.image + token2.image;
        }

        if (!type1.equals(type2) && !type1.equals("error") && !type2.equals("error")) {
            linkers.tabla.add("Error Sem\u00e1ntico en condici\u00f3n-> Tipos incompatibles en la condici\u00f3n: " + type1 + " y " + type2 + " en l\u00ednea " + token1.beginLine + ", columna " + token1.beginColumn);
        }
}

/////////////////////////////////////////    OPERADORES     //////////////////////////////////////////////
  static final public 

Token operadorRelacional() throws ParseException {Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionMayorQue:{
      id = jj_consume_token(OperacionMayorQue);
      break;
      }
    case OperacionMenorQue:{
      id = jj_consume_token(OperacionMenorQue);
      break;
      }
    case OperacionMenorOIgualQue:{
      id = jj_consume_token(OperacionMenorOIgualQue);
      break;
      }
    case OperacionMayorOIgualQue:{
      id = jj_consume_token(OperacionMayorOIgualQue);
      break;
      }
    case OperacionIgualdad:{
      id = jj_consume_token(OperacionIgualdad);
      break;
      }
    case OperacionDesigualdad:{
      id = jj_consume_token(OperacionDesigualdad);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return id;}
    throw new Error("Missing return statement in function");
}

  static final public void operadorLogico() throws ParseException {Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionAnd:{
      jj_consume_token(OperacionAnd);
      break;
      }
    case OperacionOr:{
      jj_consume_token(OperacionOr);
      break;
      }
    case OperacionNot:{
      jj_consume_token(OperacionNot);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void operadorAritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionSuma:{
      jj_consume_token(OperacionSuma);
      break;
      }
    case OperacionResta:{
      jj_consume_token(OperacionResta);
      break;
      }
    case OperacionMultiplicacion:{
      jj_consume_token(OperacionMultiplicacion);
      break;
      }
    case OperacionDivision:{
      jj_consume_token(OperacionDivision);
      break;
      }
    case OperacionResiduo:{
      jj_consume_token(OperacionResiduo);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/////////////////////////////////////////    METODOS PARA FASE SEMANTICA     //////////////////////////////////////////////
//En esta parte se consumen almacenan y comparan los token existentes para hacer funcionar 
//la fase semantica en ciclos y condiciones
  static final public 

String expresion(String expectedType) throws ParseException {String type = "";
    type = termino(expectedType);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OperacionSuma:
      case OperacionResta:
      case OperacionMultiplicacion:
      case OperacionDivision:
      case OperacionResiduo:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      operadorAritmetico();
String tempType = termino(expectedType);
            if (tempType != null && !tempType.equals(expectedType) && !tempType.equals("error")) {
                linkers.tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n. Se esperaba: " + expectedType + " pero se obtuvo: " + tempType + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
            }
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  static final public String termino(String expectedType) throws ParseException {String type = "";
    type = factor(expectedType);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OperacionSuma:
      case OperacionResta:
      case OperacionMultiplicacion:
      case OperacionDivision:
      case OperacionResiduo:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      operadorAritmetico();
String tempType = factor(expectedType);
            if (tempType != null && !tempType.equals(expectedType) && !tempType.equals("error")) {
                linkers.tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n. Se esperaba: " + expectedType + " pero se obtuvo: " + tempType + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
            }
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  static final public String factor(String expectedType) throws ParseException {Token token = null;
    String type = "";
    try {
if (nextTokenIs(linkersConstants.ParentesisAbre)) {
            type = operacionParentesis(expectedType);
        } else if (nextTokenIs(linkersConstants.NUMERO)) {
            token = jj_consume_token(linkersConstants.NUMERO);
            type = "int";
        } else if (nextTokenIs(linkersConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersConstants.NUMERO_FLOTANTE);
            type = "float";
        } else if (nextTokenIs(linkersConstants.VERDADERO)) {
            token = jj_consume_token(linkersConstants.VERDADERO);
            type = "boolean";
        } else if (nextTokenIs(linkersConstants.FALSO)) {
            token = jj_consume_token(linkersConstants.FALSO);
            type = "boolean";
        } else if (nextTokenIs(linkersConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (linkers.declaredVariables.containsKey(token.image)) {
                type = linkers.declaredVariables.get(token.image);
            } else {
                linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                type = "error"; // Asignar un tipo de error para manejar variables no declaradas
            }
        } else {
            type = "error"; // Asignar un tipo de error para casos no contemplados
        }


        if (token != null && !type.equals(expectedType) && !type.equals("error")) {
            linkers.tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto. Se esperaba: " + expectedType + " pero se obtuvo: " + type + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
    } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

// MÃ©todo auxiliar para verificar el prÃ³ximo token
  static final public boolean nextTokenIs(int kind) throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == kind;}
    throw new Error("Missing return statement in function");
}

// FunciÃ³n para manejar operaciones con parÃ©ntesis
  static final public String operacionParentesis(String expectedType) throws ParseException {String type = "";
    try {
jj_consume_token(linkersConstants.ParentesisAbre);
        type = expresion(expectedType); // Usamos la funciÃ³n `expresion` para manejar la operaciÃ³n dentro de los parÃ©ntesis
        jj_consume_token(linkersConstants.ParentesisCierra);

        if (!type.equals(expectedType)) {
            linkers.tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n entre par\u00e9ntesis. Se esperaba: " + expectedType + " pero se obtuvo: " + type);
        }
    } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  static final public Token valor() throws ParseException {Token token = null;
    try {
if (nextTokenIs(linkersConstants.NUMERO)) {
            token = jj_consume_token(linkersConstants.NUMERO);
        } else if (nextTokenIs(linkersConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersConstants.NUMERO_FLOTANTE);
        } else if (nextTokenIs(linkersConstants.VERDADERO)) {
            token = jj_consume_token(linkersConstants.VERDADERO);
        } else if (nextTokenIs(linkersConstants.FALSO)) {
            token = jj_consume_token(linkersConstants.FALSO);
        } else if (nextTokenIs(linkersConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            verificarExistenciaVariable(token);
        } else {
            linkers.tabla.add("Error de Sintaxis -> Token inesperado en la condici\u00f3n.");
            {if (true) throw new ParseException("Token inesperado en la condici\u00f3n.");}
        }
    } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
        {if (true) throw e;}
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public linkersTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x383bc,0x383bc,0x38000,0x20000000,0x20000000,0x6000,0x20000000,0x383bc,0x383bc,0x40,0x383bc,0x800,0x383bc,0x383bc,0x400,0x38000,0x383bc,0x383bc,0x0,0xc0000000,0x0,0x1f000000,0x1f000000,0x1f000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x100,0x0,0x100,0x100,0x0,0x100,0x100,0x100,0x70,0xf,0x70,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public linkers(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public linkers(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new linkersTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public linkers(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new linkersTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new linkersTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public linkers(linkersTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(linkersTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[49];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 24; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 49; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
