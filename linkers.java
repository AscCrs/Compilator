/* linkers.java */
/* Generated By:JavaCC: Do not edit this line. linkers.java */
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

class linkers implements linkersConstants {

    // Tabla de errores
    static ArrayList<String> tabla = linkersTokenManager.tablaErrores;
    static Map<String, String> declaredVariables = new HashMap<String, String>();

    // Lista para almacenar el TAC generado
    static ArrayList<TAC> intermedia = new ArrayList<TAC>();
    static int tempVarCounter = 0; // contador de variables temporales actuales
    static int labelCounter = 0; // contador de etiquetas actuales

    public static void main(String[] args) {
        try {
            linkers link = new linkers(System.in);
            link.Programalink();

            if (!link.tabla.isEmpty()) {
                System.out.println("\u001b[31m\nErrores encontrados:\n\u001b[0m");
                for (String error : link.tabla) {
                    System.out.println(error);
                }
            } else {
                System.out.println("\u001b[32mAn\u00e1lisis exitoso\u001b[0m");

                // Generar el archivo de codigo intermedio
                String outputFileName = "Intermedio.txt";
                PrintWriter writer = null;
                try {
                    writer = new PrintWriter(new FileWriter(outputFileName));
                    for (TAC i : intermedia) {
                        writer.println(i);
                    }
                    System.out.println("\nEl codigo intermedio generado ha sido guardado en el archivo: " + outputFileName);
                } catch (IOException e) {
                    System.out.println("Error al escribir el codigo intermedio en el archivo: " + e.getMessage());
                } finally {
                    if (writer != null) {
                        writer.close();
                    }
                }
            }

        } catch (ParseException e) {
            System.out.println("Error de An\u00e1lisis -> " + e.getMessage());
        }
    }

    static void checkAndAddVariable(Token id, String type, int line, int column) {
        if (declaredVariables.containsKey(id.image)) {
            tabla.add("Error Sem\u00e1ntico -> Variable repetida: " + id.image + " en l\u00ednea " + line + ", columna " + column);
        } else {
            declaredVariables.put(id.image, type);
        }
    }

    // Clase para el objeto de representacion intermedia
    static class TAC {
        private String operator;
        private String operand1;
        private String operand2;
        private String result;

        // Constructor para operaciones binarias (+, -, *, /)
        public TAC(String operator, String operand1, String operand2, String result) {
            this.operator = operator;
            this.operand1 = operand1;
            this.operand2 = operand2;
            this.result = result;
        }

        // Constructor para operaciones de Asignacion 
        public TAC(String operator, String operand1, String result) {
            this(operator, operand1, null,result); // Se llama al primer constructor por una operacion unaria
        }

        // Constructor para operaciones de salto o etiquetado 
        public TAC(String operator, String result) {
            this(operator, null, null, result); // Operaciones sin operandos
        }

        // getters

        public String getOperator() {
            return this.operator;
        }

        public String getOperand1() {
            return this.operand1;
        }

        public String getOperand2() {
            return this.operand2;
        }

        public String getResult() {
            return this.result;
        }

        @Override
        public String toString() {
            if (this.operand2 != null) { // Es una operacion binaria
                return this.result + " = " + this.operand1 + " " + this.operator + " " + this.operand2;
            } else if (this.operand1 != null) {
                return this.result + " " + this.operator + " " + this.operand1;
            } else {
                return this.operator + " " + this.result;
            }
        }
    }

    // Clase para representar el resultado de una expresión
    static class ExpressionResult {
        String type;
        String place;

        public ExpressionResult(String type, String place) {
            this.type = type;
            this.place = place;
        }
    }

    // Procedimiento para generar variables temporales 
    static String newTemp() {
        return "t" + (tempVarCounter++);
    }

    // Método para generar el etiquetado
    static String newLabel() {
        return "L" + (labelCounter++);
    }

  static final public void Programalink() throws ParseException {
    try {
      try {
        jj_consume_token(ReservadaInicio);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      jj_consume_token(0);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOF);

        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void sentencias() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:
    case TipoDatoDecimal:
    case TipoDatoBooleano:{
      declararVariables();
      break;
      }
    case IDENTIFICADOR:{
      asignacion();
      break;
      }
    case Lectura:{
      entrada();
      break;
      }
    case Escritura:{
      salida();
      break;
      }
    case CondicionalIf:{
      condicionalIf();
      break;
      }
    case CondicionalIfthen:{
      condicionalIfthen();
      break;
      }
    case CicloFor:{
      cicloFor();
      break;
      }
    case CicloWhile:{
      cicloWhile();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void verificarExistenciaVariable(Token token) throws ParseException {
if (!linkers.declaredVariables.containsKey(token.image)) {
            linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
}

  static final public String verificarExistenciaYObtenerTipo(Token token) throws ParseException {String tipo;
if (token.kind == linkersConstants.IDENTIFICADOR) {
            if (linkers.declaredVariables.containsKey(token.image)) {
                tipo = linkers.declaredVariables.get(token.image);
            } else {
                linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                tipo = "error";
            }
        } else if (token.kind == linkersConstants.NUMERO) {
            tipo = "int";
        } else if (token.kind == linkersConstants.NUMERO_FLOTANTE) {
            tipo = "float";
        } else if (token.kind == linkersConstants.VERDADERO || token.kind == linkersConstants.FALSO) {
            tipo = "boolean";
        } else if (token.kind == linkersConstants.CADENA) {
            tipo = "string";
        } else if (token.kind == linkersConstants.LETRA) {
            tipo = "char";
        }
        else {
            tipo = "error";
        }
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
}

  static final public void declararVariables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:{
      VariableINT();
      break;
      }
    case TipoDatoDecimal:{
      VariableFLOAT();
      break;
      }
    case TipoDatoBooleano:{
      VariableBOOLEAN();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void VariableINT() throws ParseException {Token id;
    int line, column;
    try {
      jj_consume_token(TipoDatoEntero);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "int", line, column);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("int");
            // Generar TAC de asignación si hay inicialización
            intermedia.add(new TAC("=", exprResult.place, id.image));
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableFLOAT() throws ParseException {Token id;
    int line, column;
    try {
      jj_consume_token(TipoDatoDecimal);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "float", line, column);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("float");
            // Generar tac de asignación si hay inicialización
            intermedia.add(new TAC("=", exprResult.place, id.image));
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableBOOLEAN() throws ParseException {Token id;
    int line, column;
    try {
      jj_consume_token(TipoDatoBooleano);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "boolean", line, column);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("boolean");
            // Generar tac de asignación si hay inicialización
            intermedia.add(new TAC("=", exprResult.place, id.image));
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableCADENA() throws ParseException {Token id;
    int line, column;
    try {
      jj_consume_token(TipoDatoCadena);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "string", line, column);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("string");
            // Generar TAC de asignación si hay inicialización
            intermedia.add(new TAC("=", exprResult.place, id.image));
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableCARACTER() throws ParseException {Token id;
    int line, column;
    try {
      jj_consume_token(TIpoDatoCaracter);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
            linkers.checkAndAddVariable(id, "char", line, column);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
ExpressionResult exprResult = expresion("char");
            // Generar tac de asignación si hay inicialización
            intermedia.add(new TAC("=", exprResult.place, id.image));
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void asignacion() throws ParseException {Token id;
    String varType = "";
    ExpressionResult exprResult;
    try {
      id = jj_consume_token(IDENTIFICADOR);
if (!linkers.declaredVariables.containsKey(id.image)) {
                linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + id.image + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            } else {
                varType = linkers.declaredVariables.get(id.image);
            }
      jj_consume_token(Asignacion);
exprResult = expresion(varType);
            if (!exprResult.type.equals(varType)) {
                linkers.tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n. Se esperaba: " + varType + " pero se obtuvo: " + exprResult.type + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            }
            // Generar TACA de asignación
            intermedia.add(new TAC("=", exprResult.place, id.image));
      jj_consume_token(DelimitadorLineaDeCodigo);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void entrada() throws ParseException {
    try {
      jj_consume_token(Lectura);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
Token token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (!linkers.declaredVariables.containsKey(token.image)) {
                linkers.tabla.add("Error Sem\u00e1ntico en entrada-> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
            } else {
                // Generar TAC de lectura
                intermedia.add(new TAC("Leer", token.image));
            }
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void salida() throws ParseException {
    try {
      jj_consume_token(Escritura);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
Token token = getToken(1);

            // Si solamente es una cadena, se escribe el mensaje
            if (token.kind == linkersConstants.CADENA) {
                jj_consume_token(linkersConstants.CADENA);
                // Generar cuadrupla de escritura
                intermedia.add(new TAC("Escribir", token.image));
            } else if (token.kind == linkersConstants.IDENTIFICADOR) {
                jj_consume_token(linkersConstants.IDENTIFICADOR);
                if (!linkers.declaredVariables.containsKey(token.image)) {
                    linkers.tabla.add("Error Sem\u00e1ntico en salida-> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                }
                intermedia.add(new TAC("Escribir", token.image));

            } else {
                linkers.tabla.add("Error de Sintaxis -> Se esperaba una cadena o un identificador, pero se encontr\u00f3: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                jj_consume_token(token.kind); // Consumir el token inesperado para continuar
            }

            while (nextTokenIs(linkersConstants.OperacionSuma)) {
                jj_consume_token(linkersConstants.OperacionSuma);
                token = getToken(1);
                if (token.kind == linkersConstants.CADENA) {
                    jj_consume_token(linkersConstants.CADENA);
                    // varCadena += token.image + " ";
                    intermedia.add(new TAC("Escribir", token.image));
                } else if (token.kind == linkersConstants.IDENTIFICADOR) {
                    jj_consume_token(linkersConstants.IDENTIFICADOR);
                    if (!linkers.declaredVariables.containsKey(token.image)) {
                        linkers.tabla.add("Error Sem\u00e1ntico en salida-> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    }
                    // varCadena += token.image + " ";
                    intermedia.add(new TAC("Escribir", token.image));
                } else {
                    linkers.tabla.add("Error de Sintaxis -> Se esperaba una cadena o un identificador, pero se encontr\u00f3: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    jj_consume_token(token.kind); // Consumir el token inesperado para continuar
                }
            }
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void condicionalIf() throws ParseException {String condFalseLabel;
    String endLabel;
    ExpressionResult condResult;
    try {
      jj_consume_token(CondicionalIf);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
condResult = condicion();
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
condFalseLabel = linkers.newLabel();
            endLabel = linkers.newLabel();
            // Generar salto condicional hacia else o fin
            intermedia.add(new TAC("ifFalse", condResult.place, "", condFalseLabel));
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
// Generar salto al fin después del bloque if
            intermedia.add(new TAC("goto", "", "", endLabel));
            // Etiqueta para el bloque else
            intermedia.add(new TAC("label", "", "", condFalseLabel));
      condicionalElseBlock();
// Etiqueta para el fin del bloque if-else
            intermedia.add(new TAC("label", "", "", endLabel));
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

// Método auxiliar para manejar el bloque else opcional
  static final public void condicionalElseBlock() throws ParseException {
    try {
      try {
        jj_consume_token(CondicionalElse);
      } catch (ParseException e) {
// No hay bloque else, regresar
                {if ("" != null) return;}
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void condicionalIfthen() throws ParseException {String condFalseLabel;
    ExpressionResult condResult;
    try {
      jj_consume_token(CondicionalIfthen);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
condResult = condicion();
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
condFalseLabel = linkers.newLabel();
            // Generar salto condicional
            intermedia.add(new TAC("ifFalse", condResult.place, "", condFalseLabel));
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
// Añadir etiqueta para el fin del bloque ifthen
            intermedia.add(new TAC("label", "", "", condFalseLabel));
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void cicloFor() throws ParseException {String startLabel, endLabel;
    ExpressionResult condResult;
    try {
      jj_consume_token(CicloFor);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TipoDatoEntero:
      case TipoDatoDecimal:
      case TipoDatoBooleano:{
        declararVariables();
        break;
        }
      case IDENTIFICADOR:{
        asignacion();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
startLabel = linkers.newLabel();
            intermedia.add(new TAC("label", "", "", startLabel));
condResult = condicion();
endLabel = linkers.newLabel();
            // Generar salto condicional
            intermedia.add(new TAC("ifFalse", condResult.place, "", endLabel));
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
asignacion();
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        sentencias();
      }
// Salto al inicio del ciclo
            intermedia.add(new TAC("goto", "", "", startLabel));
            // Etiqueta de fin del ciclo
            intermedia.add(new TAC("label", "", "", endLabel));
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void cicloWhile() throws ParseException {String startLabel, endLabel;
    ExpressionResult condResult;
    try {
      jj_consume_token(CicloWhile);
startLabel = linkers.newLabel();
            intermedia.add(new TAC("label", "", "", startLabel));
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
condResult = condicion();
endLabel = linkers.newLabel();
            // Generar salto condicional
            intermedia.add(new TAC("ifFalse", condResult.place, "", endLabel));
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalIfthen:
        case CicloWhile:
        case CicloFor:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        sentencias();
      }
// Salto al inicio del ciclo
            intermedia.add(new TAC("goto", "", "", startLabel));
            // Etiqueta de fin del ciclo
            intermedia.add(new TAC("label", "", "", endLabel));
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public ExpressionResult condicion() throws ParseException {ExpressionResult left, right;
    String op;
    left = condicionSimple();
if (nextTokenIsOperatorLogico()) { // Verificamos si viene un operador lógico
            op = operadorLogico();
            right = condicionSimple();
            String temp = linkers.newTemp();
            intermedia.add(new TAC(op, left.place, right.place, temp));
            left = new ExpressionResult("boolean", temp);
        }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult condicionSimple() throws ParseException {Token token1, token2;
    String type1 = "", type2 = "";
    String op;
    ExpressionResult left, right;
left = valor("any"); // Permitir cualquier tipo
        op = operadorRelacional();
        right = valor("any"); // Permitir cualquier tipo

        // Verificar que ambos operandos sean del mismo tipo o tipos compatibles
        if (!left.type.equals(right.type) && !left.type.equals("error") && !right.type.equals("error")) {
            tabla.add("Error Sem\u00e1ntico en condici\u00f3n-> Tipos incompatibles en la condici\u00f3n: " + left.type + " y " + right.type);
        }

        // Generar una variable temporal para el resultado booleano
        String temp = linkers.newTemp();
        intermedia.add(new TAC(op, left.place, right.place, temp));

        {if ("" != null) return new ExpressionResult("boolean", temp);}
    throw new Error("Missing return statement in function");
}

  static final public String operadorRelacional() throws ParseException {Token opToken;
    String opStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionMayorQue:{
      opToken = jj_consume_token(OperacionMayorQue);
opStr = ">";
      break;
      }
    case OperacionMenorQue:{
      opToken = jj_consume_token(OperacionMenorQue);
opStr = "<";
      break;
      }
    case OperacionMenorOIgualQue:{
      opToken = jj_consume_token(OperacionMenorOIgualQue);
opStr = "<=";
      break;
      }
    case OperacionMayorOIgualQue:{
      opToken = jj_consume_token(OperacionMayorOIgualQue);
opStr = ">=";
      break;
      }
    case OperacionIgualdad:{
      opToken = jj_consume_token(OperacionIgualdad);
opStr = "==";
      break;
      }
    case OperacionDesigualdad:{
      opToken = jj_consume_token(OperacionDesigualdad);
opStr = "!=";
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return opStr;}
    throw new Error("Missing return statement in function");
}

  static final public String operadorLogico() throws ParseException {Token opToken;
    String opStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionAnd:{
      opToken = jj_consume_token(OperacionAnd);
opStr = "&";
      break;
      }
    case OperacionOr:{
      opToken = jj_consume_token(OperacionOr);
opStr = "|";
      break;
      }
    case OperacionNot:{
      opToken = jj_consume_token(OperacionNot);
opStr = "!";
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return opStr;}
    throw new Error("Missing return statement in function");
}

  static final public String operadorAritmetico() throws ParseException {Token opToken;
    String opStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionSuma:{
      opToken = jj_consume_token(OperacionSuma);
opStr = "+";
      break;
      }
    case OperacionResta:{
      opToken = jj_consume_token(OperacionResta);
opStr = "-";
      break;
      }
    case OperacionMultiplicacion:{
      opToken = jj_consume_token(OperacionMultiplicacion);
opStr = "*";
      break;
      }
    case OperacionDivision:{
      opToken = jj_consume_token(OperacionDivision);
opStr = "/";
      break;
      }
    case OperacionResiduo:{
      opToken = jj_consume_token(OperacionResiduo);
opStr = "%";
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return opStr;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult expresion(String expectedType) throws ParseException {ExpressionResult left, right;
    String op;
    left = termino(expectedType);
if (nextTokenIsOperadorAritmetico()) {  // Verifica si hay un operador aritmético
            op = operadorAritmetico();
            right = termino(expectedType);
            if (!left.type.equals(expectedType) || !right.type.equals(expectedType)) {
                tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n. Se esperaba: " + expectedType + " pero se obtuvo: " + left.type + " y " + right.type);
            }
            String temp = linkers.newTemp();
            intermedia.add(new TAC(op, left.place, right.place, temp));
            left = new ExpressionResult(expectedType, temp);
        }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult termino(String expectedType) throws ParseException {ExpressionResult left, right;
    String op;
    left = factor(expectedType);
if (nextTokenIsOperadorAritmetico()) {  // Verifica si hay un operador aritmético
            op = operadorAritmetico();
            right = factor(expectedType);
            if (!left.type.equals(expectedType) || !right.type.equals(expectedType)) {
                tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n. Se esperaba: " + expectedType + " pero se obtuvo: " + left.type + " y " + right.type);
            }
            String temp = linkers.newTemp();
            intermedia.add(new TAC(op, left.place, right.place, temp));
            left = new ExpressionResult(expectedType, temp);
        }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult factor(String expectedType) throws ParseException {Token token = null;
    String type = "";
    String place = "";
    ExpressionResult res = null; // Inicialización corregida

    try {
if (nextTokenIs(linkersConstants.ParentesisAbre)) {
            res = operacionParentesis(expectedType);
            type = res.type;
            place = res.place;
        } else if (nextTokenIs(linkersConstants.NUMERO)) {
            token = jj_consume_token(linkersConstants.NUMERO);
            type = "int";
            place = token.image;
        } else if (nextTokenIs(linkersConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersConstants.NUMERO_FLOTANTE);
            type = "float";
            place = token.image;
        } else if (nextTokenIs(linkersConstants.VERDADERO)) {
            token = jj_consume_token(linkersConstants.VERDADERO);
            type = "boolean";
            place = "1";
        } else if (nextTokenIs(linkersConstants.FALSO)) {
            token = jj_consume_token(linkersConstants.FALSO);
            type = "boolean";
            place = "0";
        } else if (nextTokenIs(linkersConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (linkers.declaredVariables.containsKey(token.image)) {
                type = linkers.declaredVariables.get(token.image);
                place = token.image;
            } else {
                tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                type = "error";
            }
        } else {
            type = "error";
        }
if (token != null && !"any".equals(expectedType) && !type.equals(expectedType) && !type.equals("error")) {
            tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto. Se esperaba: " + expectedType + " pero se obtuvo: " + type + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
{if ("" != null) return (res != null) ? res : new ExpressionResult(type, place);}
    throw new Error("Missing return statement in function");
}

  static final public boolean nextTokenIs(int kind) throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == kind;}
    throw new Error("Missing return statement in function");
}

// Métodos auxiliares para detectar operadores
  static final public boolean nextTokenIsOperatorLogico() throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == linkersConstants.OperacionAnd || t.kind == linkersConstants.OperacionOr || t.kind == linkersConstants.OperacionNot;}
    throw new Error("Missing return statement in function");
}

  static final public boolean nextTokenIsOperadorAritmetico() throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == linkersConstants.OperacionSuma || t.kind == linkersConstants.OperacionResta ||
           t.kind == linkersConstants.OperacionMultiplicacion || t.kind == linkersConstants.OperacionDivision ||
           t.kind == linkersConstants.OperacionResiduo;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult operacionParentesis(String expectedType) throws ParseException {ExpressionResult res=null;
    try {
jj_consume_token(linkersConstants.ParentesisAbre);
        res = expresion(expectedType);
        jj_consume_token(linkersConstants.ParentesisCierra);

        if (!res.type.equals(expectedType)) {
            tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en la operaci\u00f3n entre par\u00e9ntesis. Se esperaba: " + expectedType + " pero se obtuvo: " + res.type);
        }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionResult valor(String expectedType) throws ParseException {Token token = null;
    String type = "";
    String place = "";
    try {
if (nextTokenIs(linkersConstants.NUMERO)) {
            token = jj_consume_token(linkersConstants.NUMERO);
            type = "int";
            place = token.image;
        } else if (nextTokenIs(linkersConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersConstants.NUMERO_FLOTANTE);
            type = "float";
            place = token.image;
        } else if (nextTokenIs(linkersConstants.VERDADERO)) {
            token = jj_consume_token(linkersConstants.VERDADERO);
            type = "boolean";
            place = "1";
        } else if (nextTokenIs(linkersConstants.FALSO)) {
            token = jj_consume_token(linkersConstants.FALSO);
            type = "boolean";
            place = "0";
        } else if (nextTokenIs(linkersConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (linkers.declaredVariables.containsKey(token.image)) {
                type = linkers.declaredVariables.get(token.image);
                place = token.image;
            } else {
                tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                type = "error";
            }
        } else {
            tabla.add("Error Sem\u00e1ntico -> Token inesperado en la condici\u00f3n.");
            {if (true) throw new ParseException("Token inesperado en la condici\u00f3n.");}
        }
if (token != null && !"any".equals(expectedType) && !type.equals(expectedType) && !type.equals("error")) {
            tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto. Se esperaba: " + expectedType + " pero se obtuvo: " + type + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        {if (true) throw e;}
    }
{if ("" != null) return new ExpressionResult(type, place);}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public linkersTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3835c,0x3835c,0x38000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x3835c,0x3835c,0x3835c,0x38000,0x3835c,0x3835c,0x0,0x0,0x7c000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x400,0x400,0x400,0x400,0x3f,0x1c0,0x0,};
	}

  /** Constructor with InputStream. */
  public linkers(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public linkers(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new linkersTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public linkers(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new linkersTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new linkersTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public linkers(linkersTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(linkersTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[52];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 17; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 52; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
