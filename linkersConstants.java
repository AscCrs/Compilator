/* Generated By:JavaCC: Do not edit this line. linkersConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface linkersConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ReservadaInicio = 1;
  /** RegularExpression Id. */
  int Lectura = 2;
  /** RegularExpression Id. */
  int Escritura = 3;
  /** RegularExpression Id. */
  int CondicionalIf = 4;
  /** RegularExpression Id. */
  int CondicionalIfthen = 5;
  /** RegularExpression Id. */
  int CondicionalElse = 6;
  /** RegularExpression Id. */
  int CondicionalSwitch = 7;
  /** RegularExpression Id. */
  int CicloWhile = 8;
  /** RegularExpression Id. */
  int CicloFor = 9;
  /** RegularExpression Id. */
  int Default = 10;
  /** RegularExpression Id. */
  int Caso = 11;
  /** RegularExpression Id. */
  int Break = 12;
  /** RegularExpression Id. */
  int VERDADERO = 13;
  /** RegularExpression Id. */
  int FALSO = 14;
  /** RegularExpression Id. */
  int TipoDatoEntero = 15;
  /** RegularExpression Id. */
  int TipoDatoDecimal = 16;
  /** RegularExpression Id. */
  int TipoDatoBooleano = 17;
  /** RegularExpression Id. */
  int LlaveAbre = 18;
  /** RegularExpression Id. */
  int LlaveCierra = 19;
  /** RegularExpression Id. */
  int ParentesisAbre = 20;
  /** RegularExpression Id. */
  int ParentesisCierra = 21;
  /** RegularExpression Id. */
  int DelimitadorLineaDeCodigo = 22;
  /** RegularExpression Id. */
  int DelimitadorCasoSwitch = 23;
  /** RegularExpression Id. */
  int OperacionSuma = 24;
  /** RegularExpression Id. */
  int OperacionResta = 25;
  /** RegularExpression Id. */
  int OperacionMultiplicacion = 26;
  /** RegularExpression Id. */
  int OperacionDivision = 27;
  /** RegularExpression Id. */
  int OperacionResiduo = 28;
  /** RegularExpression Id. */
  int Asignacion = 29;
  /** RegularExpression Id. */
  int OperacionMayorQue = 30;
  /** RegularExpression Id. */
  int OperacionMenorQue = 31;
  /** RegularExpression Id. */
  int OperacionMenorOIgualQue = 32;
  /** RegularExpression Id. */
  int OperacionMayorOIgualQue = 33;
  /** RegularExpression Id. */
  int OperacionIgualdad = 34;
  /** RegularExpression Id. */
  int OperacionDesigualdad = 35;
  /** RegularExpression Id. */
  int OperacionAnd = 36;
  /** RegularExpression Id. */
  int OperacionOr = 37;
  /** RegularExpression Id. */
  int OperacionNot = 38;
  /** RegularExpression Id. */
  int CADENA = 39;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 40;
  /** RegularExpression Id. */
  int NUMERO_FLOTANTE = 41;
  /** RegularExpression Id. */
  int NUMERO = 42;
  /** RegularExpression Id. */
  int LETRA = 43;
  /** RegularExpression Id. */
  int IdPrograma = 44;
  /** RegularExpression Id. */
  int ANYTHING = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"INICIAR\"",
    "\"Leer\"",
    "\"Escribir\"",
    "\"if\"",
    "\"ifthen\"",
    "\"else\"",
    "\"Switch\"",
    "\"While\"",
    "\"For\"",
    "\"Default\"",
    "\"Caso\"",
    "\"Break\"",
    "\"Verdadero\"",
    "\"Falso\"",
    "\"Entero\"",
    "\"Decimal\"",
    "\"boolean\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "<CADENA>",
    "<IDENTIFICADOR>",
    "<NUMERO_FLOTANTE>",
    "<NUMERO>",
    "<LETRA>",
    "<IdPrograma>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<ANYTHING>",
  };

}
